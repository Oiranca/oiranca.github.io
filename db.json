{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/img/logo-dark.png","path":"img/logo-dark.png","modified":0,"renderable":0},{"_id":"source/img/logo.png","path":"img/logo.png","modified":0,"renderable":0},{"_id":"source/img/397x300/01.jpg","path":"img/397x300/01.jpg","modified":0,"renderable":0},{"_id":"source/img/397x300/02.jpg","path":"img/397x300/02.jpg","modified":0,"renderable":0},{"_id":"source/img/397x300/03.jpg","path":"img/397x300/03.jpg","modified":0,"renderable":0},{"_id":"source/img/800x400/01.jpg","path":"img/800x400/01.jpg","modified":0,"renderable":0},{"_id":"source/img/397x400/01.jpg","path":"img/397x400/01.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-144x144.png","path":"img/favicon/android-icon-144x144.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-192x192.png","path":"img/favicon/android-icon-192x192.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-36x36.png","path":"img/favicon/android-icon-36x36.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-48x48.png","path":"img/favicon/android-icon-48x48.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-72x72.png","path":"img/favicon/android-icon-72x72.png","modified":0,"renderable":0},{"_id":"source/img/favicon/android-icon-96x96.png","path":"img/favicon/android-icon-96x96.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-114x114.png","path":"img/favicon/apple-icon-114x114.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-120x120.png","path":"img/favicon/apple-icon-120x120.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-144x144.png","path":"img/favicon/apple-icon-144x144.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-152x152.png","path":"img/favicon/apple-icon-152x152.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-180x180.png","path":"img/favicon/apple-icon-180x180.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-57x57.png","path":"img/favicon/apple-icon-57x57.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-60x60.png","path":"img/favicon/apple-icon-60x60.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-72x72.png","path":"img/favicon/apple-icon-72x72.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-76x76.png","path":"img/favicon/apple-icon-76x76.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon-precomposed.png","path":"img/favicon/apple-icon-precomposed.png","modified":0,"renderable":0},{"_id":"source/img/favicon/apple-icon.png","path":"img/favicon/apple-icon.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-16x16.png","path":"img/favicon/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-32x32.png","path":"img/favicon/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon-96x96.png","path":"img/favicon/favicon-96x96.png","modified":0,"renderable":0},{"_id":"source/img/favicon/favicon.ico","path":"img/favicon/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/favicon/ms-icon-144x144.png","path":"img/favicon/ms-icon-144x144.png","modified":0,"renderable":0},{"_id":"source/img/favicon/ms-icon-150x150.png","path":"img/favicon/ms-icon-150x150.png","modified":0,"renderable":0},{"_id":"source/img/favicon/ms-icon-70x70.png","path":"img/favicon/ms-icon-70x70.png","modified":0,"renderable":0},{"_id":"themes/aircv/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":0,"renderable":1},{"_id":"themes/aircv/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":0,"renderable":1},{"_id":"themes/aircv/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":0,"renderable":1},{"_id":"themes/aircv/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":0,"renderable":1},{"_id":"themes/aircv/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/logo-dark.png","path":"img/logo-dark.png","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/layout.js","path":"js/layout.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/layout.min.js","path":"js/layout.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/sass/fontello.scss","path":"sass/fontello.scss","modified":0,"renderable":1},{"_id":"themes/aircv/source/sass/layout.scss","path":"sass/layout.scss","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/jquery-migrate.min.js","path":"vendor/jquery-migrate.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/jquery.appear.js","path":"vendor/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/jquery.back-to-top.js","path":"vendor/jquery.back-to-top.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/jquery.easing.js","path":"vendor/jquery.easing.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/jquery.parallax.min.js","path":"vendor/jquery.parallax.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/jquery.wow.min.js","path":"vendor/jquery.wow.min.js","modified":0,"renderable":1},{"_id":"source/img/favicon/ms-icon-310x310.png","path":"img/favicon/ms-icon-310x310.png","modified":0,"renderable":0},{"_id":"source/img/firstPost/codeimg.jpg","path":"img/firstPost/codeimg.jpg","modified":0,"renderable":0},{"_id":"source/img/homeWork/Logo_HomeworK.png","path":"img/homeWork/Logo_HomeworK.png","modified":0,"renderable":0},{"_id":"themes/aircv/source/vendor/jquery.min.js","path":"vendor/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/397x300/01.jpg","path":"img/397x300/01.jpg","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/397x300/02.jpg","path":"img/397x300/02.jpg","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/397x300/03.jpg","path":"img/397x300/03.jpg","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/397x400/01.jpg","path":"img/397x400/01.jpg","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/800x400/01.jpg","path":"img/800x400/01.jpg","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/components/masonry.js","path":"js/components/masonry.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/components/masonry.min.js","path":"js/components/masonry.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/components/progress-bar.js","path":"js/components/progress-bar.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/components/progress-bar.min.js","path":"js/components/progress-bar.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/components/wow.js","path":"js/components/wow.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/js/components/wow.min.js","path":"js/components/wow.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/jquery.min.map","path":"vendor/jquery.min.map","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/masonry/imagesloaded.pkgd.min.js","path":"vendor/masonry/imagesloaded.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/masonry/jquery.masonry.pkgd.min.js","path":"vendor/masonry/jquery.masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/animate.css/animate.css","path":"vendor/animate.css/animate.css","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.css","path":"vendor/bootstrap/css/bootstrap-theme.css","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.min.css.map","path":"vendor/bootstrap/css/bootstrap-theme.min.css.map","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.min.css","path":"vendor/bootstrap/css/bootstrap-theme.min.css","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.css.map","path":"vendor/bootstrap/css/bootstrap-theme.css.map","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.min.css.map","path":"vendor/bootstrap/css/bootstrap.min.css.map","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot","path":"vendor/bootstrap/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg","path":"vendor/bootstrap/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf","path":"vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff","path":"vendor/bootstrap/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2","path":"vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/js/npm.js","path":"vendor/bootstrap/js/npm.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/js/bootstrap.min.js","path":"vendor/bootstrap/js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/simple-line-icons/css/simple-line-icons.css","path":"vendor/simple-line-icons/css/simple-line-icons.css","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.svg","path":"vendor/simple-line-icons/fonts/Simple-Line-Icons.svg","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf","path":"vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.eot","path":"vendor/simple-line-icons/fonts/Simple-Line-Icons.eot","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2","path":"vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2","modified":0,"renderable":1},{"_id":"source/img/japon/templo.jpg","path":"img/japon/templo.jpg","modified":0,"renderable":0},{"_id":"source/img/perfil/photo_me.jpg","path":"img/perfil/photo_me.jpg","modified":0,"renderable":0},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.min.css","path":"vendor/bootstrap/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff","path":"vendor/simple-line-icons/fonts/Simple-Line-Icons.woff","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/js/bootstrap.js","path":"vendor/bootstrap/js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.css","path":"vendor/bootstrap/css/bootstrap.css","modified":0,"renderable":1},{"_id":"source/img/1920x1080/01.jpg","path":"img/1920x1080/01.jpg","modified":0,"renderable":0},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.css.map","path":"vendor/bootstrap/css/bootstrap.css.map","modified":0,"renderable":1},{"_id":"themes/aircv/source/img/1920x1080/01.jpg","path":"img/1920x1080/01.jpg","modified":0,"renderable":1},{"_id":"source/img/japon/templo_izquierda.jpg","path":"img/japon/templo_izquierda.jpg","modified":0,"renderable":0},{"_id":"source/img/huellapositiva/cropped-Logo-Huella-Positiva-PV-05-fondo2.png","path":"img/huellapositiva/cropped-Logo-Huella-Positiva-PV-05-fondo2.png","modified":0,"renderable":0},{"_id":"source/img/moviesforworld/moviesforworld.png","path":"img/moviesforworld/moviesforworld.png","modified":0,"renderable":0},{"_id":"source/img/ecommerce/logo-ecommerce.png","path":"img/ecommerce/logo-ecommerce.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/aircv/package.json","hash":"48f38a6d073099bf80bf953407a875a0c2d5e080","modified":1599309034244},{"_id":"themes/aircv/package-lock.json","hash":"a95467c680ea61b8572662e13c09ef87bed7d70b","modified":1599309034244},{"_id":"themes/aircv/yarn.lock","hash":"f641dc4f3549334f8b5aff6b5f95a88a1ebe4901","modified":1599309034248},{"_id":"source/_data/about.yaml","hash":"0734e6408d8917fc7a168116769dce946f203e13","modified":1620586147250},{"_id":"source/_data/contact.yaml","hash":"a559e15326d028ca3f81671fa44fabd554885761","modified":1599309034236},{"_id":"source/_data/experience.yaml","hash":"33b5029a69e0050046fe9e936c60a58400ad16ab","modified":1608993905128},{"_id":"source/_data/footer.yaml","hash":"ae8b9167c7afb27105a701709e68e5fbd8942867","modified":1599309034236},{"_id":"source/_data/hero.yaml","hash":"e121c1cab4136f47ee73e06d0634c6434e45b9dc","modified":1599309034236},{"_id":"source/_data/logo.yaml","hash":"4d80a5eae6792e8f9c3f9f7ebeb9597ccde4ceb1","modified":1599309034236},{"_id":"source/_data/portfolio.yaml","hash":"29bb7bb5a70dd9a4666864b618f61f3a1ad76f6a","modified":1620586521151},{"_id":"source/_drafts/hello-world.md","hash":"a42a06348f3a3a9ce83d60e669ff11f2f850403a","modified":1599309034236},{"_id":"source/_posts/Este-camino-llamado-“codigo”.md","hash":"525bd9dbacd4e9340813c32063c2cfe400bb9196","modified":1599309034236},{"_id":"source/img/logo-dark.png","hash":"20b1d20909f1bf92305106e11a16986d832134f1","modified":1599309034240},{"_id":"source/img/logo.png","hash":"7986015da6e157ce0cccc11f27bdab159fc3bce1","modified":1599309034240},{"_id":"themes/aircv/doc/aircv.png","hash":"b26938aab7fb2b39d6f63c88cbfb6e91404e9e16","modified":1599309034240},{"_id":"themes/aircv/doc/demo-button_x2.png","hash":"2da3bd318c8ce15c123300ec2f2495c38791f827","modified":1599309034240},{"_id":"themes/aircv/doc/demo-button.png","hash":"944743fb1635ce1ca781c5126b39a0d46c10ec14","modified":1599309034240},{"_id":"themes/aircv/layout/archive.ejs","hash":"da7046734857568c38a7e20e455f56c09041578a","modified":1599309034244},{"_id":"themes/aircv/layout/category.ejs","hash":"0879cf5f949214708b49948e710194782ef61ea8","modified":1599309034244},{"_id":"themes/aircv/layout/index.ejs","hash":"fc91dbdc68d218d455881e90e704901d65c78865","modified":1599309034244},{"_id":"themes/aircv/layout/index_aux.html","hash":"cec0993fab384c168e25d5d825b3a8142fd9b386","modified":1599309034244},{"_id":"themes/aircv/layout/layout.ejs","hash":"8786a51c136e9d4f55f83985769b3dcf2026bd5f","modified":1599410146044},{"_id":"themes/aircv/layout/page.ejs","hash":"99e931611b9fb37248ce358fc1e63e8dba1be69b","modified":1599309034244},{"_id":"themes/aircv/layout/post.ejs","hash":"b6e8ed6eb1d810d6db7db85b4c56228dfdec7267","modified":1599309034244},{"_id":"themes/aircv/layout/tag.ejs","hash":"266e904fcfb1369e65049d358558d695d6a3dc2f","modified":1599309034244},{"_id":"themes/aircv/licenses/license.txt","hash":"22fc6bb4e1924de4b508ae28cab87b2c515816eb","modified":1599309034244},{"_id":"themes/aircv/licenses/readme.txt","hash":"2e1eeb0bb206371e50ae6ed6eecd7d1f4c17d483","modified":1599309034244},{"_id":"themes/aircv/scripts/default-data.js","hash":"d79f2b1ab31d0a7a58f4d29440220038ccc22a56","modified":1599309034244},{"_id":"themes/aircv/scripts/image-info.js","hash":"5cf734a2c592cdb62a9958018c034c8c00aedfbd","modified":1599309034244},{"_id":"source/img/397x300/01.jpg","hash":"a6461d659a5980214f98fa881fd30908481442c5","modified":1599309034236},{"_id":"source/img/397x300/02.jpg","hash":"1671f94ac1e675d1dacd9d621229b020aa4391f3","modified":1599309034236},{"_id":"source/img/397x300/03.jpg","hash":"cab6e255b59fa68b8516cb1ddb5e5da829b58de6","modified":1599309034236},{"_id":"source/img/800x400/01.jpg","hash":"9d283ae70fbdf1b6d915f86a3dc699fe62ee459b","modified":1599309034236},{"_id":"source/img/397x400/01.jpg","hash":"7fd0a6cfca204d75d74cca797baf7f7b59bc4ec7","modified":1599309034236},{"_id":"source/img/favicon/android-icon-144x144.png","hash":"6b9f10385d2cad54ede15614912d5f42f7f26ddd","modified":1599309034236},{"_id":"source/img/favicon/android-icon-192x192.png","hash":"5a326851f86461a04399eef69882bbfd8de28941","modified":1599309034240},{"_id":"source/img/favicon/android-icon-36x36.png","hash":"f835095277914c478d87d8d45dda71fdb792d686","modified":1599309034236},{"_id":"source/img/favicon/android-icon-48x48.png","hash":"5c437a3957bb8886c89d51ed63ee95fe8a50feb4","modified":1599309034236},{"_id":"source/img/favicon/android-icon-72x72.png","hash":"01ee2f49b81ae8003c1042d3b2352c6273fda39a","modified":1599309034236},{"_id":"source/img/favicon/android-icon-96x96.png","hash":"94142a890e3cf11543c9b72ade5e31d0c1bf6f57","modified":1599309034236},{"_id":"source/img/favicon/apple-icon-114x114.png","hash":"999d34be4db42ace0e6809e51a7266a07bbbaa48","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-120x120.png","hash":"1b43b590d49408a16cfccae5713137071f43a958","modified":1599309034236},{"_id":"source/img/favicon/apple-icon-144x144.png","hash":"6b9f10385d2cad54ede15614912d5f42f7f26ddd","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-152x152.png","hash":"77bb61340a7e29ff4c724ccf17d0bd4b9ac4e043","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-180x180.png","hash":"284257d193b670df90fe3094bee68ba4e6f4c509","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-57x57.png","hash":"04ac3c9261a5dffcc5a4ff1fe4dbff902bd7f7e7","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-60x60.png","hash":"73f243ed4b3cb91a09ad45f954fcaea47f7b17b7","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-72x72.png","hash":"01ee2f49b81ae8003c1042d3b2352c6273fda39a","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-76x76.png","hash":"82721f285ae1c470e0b79d138805c6f9fb155863","modified":1599309034240},{"_id":"source/img/favicon/apple-icon-precomposed.png","hash":"c5ef3c1ebf752d66b9e10d816c26c23c8a6c1f1c","modified":1599309034240},{"_id":"source/img/favicon/apple-icon.png","hash":"c5ef3c1ebf752d66b9e10d816c26c23c8a6c1f1c","modified":1599309034240},{"_id":"source/img/favicon/favicon-16x16.png","hash":"0dcd1c5f57d9a82eedd8f8b8e9350380c4fc9d9c","modified":1599309034240},{"_id":"source/img/favicon/favicon-32x32.png","hash":"33ca98e15db567d5daa31de50806adc958f6aef1","modified":1599309034240},{"_id":"source/img/favicon/favicon-96x96.png","hash":"94142a890e3cf11543c9b72ade5e31d0c1bf6f57","modified":1599309034240},{"_id":"source/img/favicon/favicon.ico","hash":"5667c08915d50311bcfa638e29281575fd88f6ef","modified":1599309034240},{"_id":"source/img/favicon/manifest.json","hash":"d11febf9e708a9e11baee37ed7dc5e99902580be","modified":1599309034240},{"_id":"source/img/favicon/ms-icon-144x144.png","hash":"6b9f10385d2cad54ede15614912d5f42f7f26ddd","modified":1599309034240},{"_id":"source/img/favicon/ms-icon-150x150.png","hash":"7ad806c2c659089791d6d2ceee80b735d9620a85","modified":1599309034240},{"_id":"source/img/favicon/ms-icon-70x70.png","hash":"746a38448824d93a3c13d47c1cff797cf7e5a270","modified":1599309034240},{"_id":"themes/aircv/source/fonts/fontello.eot","hash":"823bcbcbaa428e6f2a16cd5e0e0de251ef052487","modified":1599309034244},{"_id":"themes/aircv/source/fonts/fontello.svg","hash":"dbf4e8a2992307a8e30093dc126643febe4832bb","modified":1599309034244},{"_id":"themes/aircv/source/fonts/fontello.ttf","hash":"122ac1f5d3c4b855bd8c26cc29f12963be173a0e","modified":1599309034244},{"_id":"themes/aircv/source/fonts/fontello.woff","hash":"5f8fb330ea74404786ff512e9125b54c1acadb4d","modified":1599309034244},{"_id":"themes/aircv/source/fonts/fontello.woff2","hash":"d3a6780844bc138ca017f105a95a75c6118d6049","modified":1599309034244},{"_id":"themes/aircv/source/img/logo-dark.png","hash":"20b1d20909f1bf92305106e11a16986d832134f1","modified":1599309034244},{"_id":"themes/aircv/source/img/logo.png","hash":"7986015da6e157ce0cccc11f27bdab159fc3bce1","modified":1599309034244},{"_id":"themes/aircv/source/js/layout.js","hash":"9028c4e0caaa87a515a632a708265dd9084fa473","modified":1599309034244},{"_id":"themes/aircv/source/js/layout.min.js","hash":"15f5461988413ceb69c3ea0972f25d4431de3eae","modified":1599309034244},{"_id":"themes/aircv/source/sass/_mixins.scss","hash":"6bd760083ce04da891cb4c0f4783742519c9ee2b","modified":1599309034244},{"_id":"themes/aircv/source/sass/_variables.scss","hash":"983da152519b0c3094c10cce38814d4c38ca00a7","modified":1599309034244},{"_id":"themes/aircv/source/sass/fontello.scss","hash":"046d450614c72bba822dc8d1428ff1d9081f07c7","modified":1599309034244},{"_id":"themes/aircv/source/sass/layout.scss","hash":"49cf0168043b3bf15bbe30455d0bf8d33228eeed","modified":1599309034244},{"_id":"themes/aircv/source/vendor/jquery-migrate.min.js","hash":"875bce76a77590c3c438bbc6e014b39c23c8c88d","modified":1599309034248},{"_id":"themes/aircv/source/vendor/jquery.appear.js","hash":"b08e23c986259073419a7068fcd36296a91b1ae4","modified":1599309034248},{"_id":"themes/aircv/source/vendor/jquery.back-to-top.js","hash":"525fdbd12bddef337948a12f894b707fd1aae2a2","modified":1599309034248},{"_id":"themes/aircv/source/vendor/jquery.easing.js","hash":"5249ba97aa63b8555f1629d6470fd5223e818ead","modified":1599309034248},{"_id":"themes/aircv/source/vendor/jquery.parallax.min.js","hash":"c52476c9451fc0d754510a19a131fd05dfa21527","modified":1599309034248},{"_id":"themes/aircv/source/vendor/jquery.wow.min.js","hash":"82d963e88cfb071d527a4aa393d623230ae321a5","modified":1599309034248},{"_id":"source/_data/menu.yaml","hash":"79800af0c9fa4c735b9e67f9b1f2914942250d8b","modified":1599313036139},{"_id":"source/img/favicon/ms-icon-310x310.png","hash":"103003882e0b9afec0b71b69ef5849ccd464638f","modified":1599309034240},{"_id":"source/img/firstPost/codeimg.jpg","hash":"c251d592ccf8b355660c1c90368d2a8953280208","modified":1599309034240},{"_id":"source/img/homeWork/Logo_HomeworK.png","hash":"a1e0243daded97fee2db350f741aeb1d4b3625e5","modified":1599309034240},{"_id":"source/_data/social.yaml","hash":"5569fd0e0ae424c36b21e43a884fab76c5e2d927","modified":1599331364601},{"_id":"themes/aircv/source/vendor/jquery.min.js","hash":"a4837154098ac13ccd72e08fd25d7bcf76826986","modified":1599309034248},{"_id":"themes/aircv/layout/_partial/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/footer/index.ejs","hash":"31aab6d3d1b22c6b82a68741e2d8934aa12015e6","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/footer/scripts.ejs","hash":"74046dc56aaff0496a43467985bac6ca1e94e4e4","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/author.ejs","hash":"d575e7a9e781581486bca954dc1c27ebf2958577","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/common.ejs","hash":"945e9ab5e5dbde3bff95c45a24826d37f41a0c96","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/description.ejs","hash":"ec749d43fa831aff47df92433d682554a9d57b7f","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/favicon.ejs","hash":"f41b7f3ab5fbd778be0bfcba9e1ef7437a3e0184","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/fonts.ejs","hash":"cddc887078ed4bafa53374b70b8052e22683efe4","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/index.ejs","hash":"cbeaecb6b2c4abd5275ef87097878e9d88b8782e","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/opengraph.ejs","hash":"966c99b392b780c13a24f27dc938367fdcb1b16d","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/styles.ejs","hash":"9094ee92f5da9aa91dd5405e998c96a7fb9cd241","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/title.ejs","hash":"270407fb4cf02cd9d8147a01fb2506e7b1a7e2a7","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/head/tracking.ejs","hash":"432d4860b2a58bb1d3a5f76585eadb8676f53681","modified":1599411070622},{"_id":"themes/aircv/layout/_partial/header/index.ejs","hash":"62afbb361498399496053d1941a982910a2080a8","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/header/scripts.ejs","hash":"9726bb64f6114d3edec126b36dbeab06135dc6c2","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/archive copy.ejs","hash":"0bf455ca4102a5a53f3ec31bf347fc54debfc54c","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/archive.ejs","hash":"3d6f201290a3a6c43c50215844fcd08202828bbb","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/article.ejs","hash":"f08158a905b1392b68f2aa4f77df7ea3ce38ca3e","modified":1606077193472},{"_id":"themes/aircv/layout/_partial/hexo/category.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/projects.ejs","hash":"6c88d5c917c8e8aeaaaf142f13a15595cf409dae","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/tag.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/scripts/google_analytics.ejs","hash":"022e709630106457d6cc247ef2161a6e8d2e3e2d","modified":1599411070742},{"_id":"themes/aircv/source/img/397x300/01.jpg","hash":"a6461d659a5980214f98fa881fd30908481442c5","modified":1599309034244},{"_id":"themes/aircv/source/img/397x300/02.jpg","hash":"1671f94ac1e675d1dacd9d621229b020aa4391f3","modified":1599309034244},{"_id":"themes/aircv/source/img/397x300/03.jpg","hash":"cab6e255b59fa68b8516cb1ddb5e5da829b58de6","modified":1599309034244},{"_id":"themes/aircv/source/img/397x400/01.jpg","hash":"7fd0a6cfca204d75d74cca797baf7f7b59bc4ec7","modified":1599309034244},{"_id":"themes/aircv/source/img/800x400/01.jpg","hash":"9d283ae70fbdf1b6d915f86a3dc699fe62ee459b","modified":1599309034244},{"_id":"themes/aircv/source/js/components/masonry.js","hash":"3e9046ab2ad6fc7899ab8f3c604edf29c303bb0c","modified":1599309034244},{"_id":"themes/aircv/source/js/components/masonry.min.js","hash":"9daaaaf8f3c423990bb8e6cb0048ba54e0ab2be4","modified":1599309034244},{"_id":"themes/aircv/source/js/components/progress-bar.js","hash":"4d6af5ce210707cdc63f1bd702751c176579aaa9","modified":1599309034244},{"_id":"themes/aircv/source/js/components/progress-bar.min.js","hash":"538c610a4427bcb5a50fa5710775bae516510f6f","modified":1599309034244},{"_id":"themes/aircv/source/js/components/wow.js","hash":"d166d4fe88b56af4f4747b6d59d4040fc36b9804","modified":1599309034244},{"_id":"themes/aircv/source/js/components/wow.min.js","hash":"c90df564b8fb6cdb1cb682d9be9e627662a7d32d","modified":1599309034244},{"_id":"themes/aircv/source/sass/base/_base.scss","hash":"be1009acac164f541486c11b0fff6ef90c693320","modified":1599309034244},{"_id":"themes/aircv/source/sass/base/_blog.scss","hash":"752c6a1d83a9c236031c9adc0db86becd748e4f6","modified":1599336565257},{"_id":"themes/aircv/source/sass/base/_page.scss","hash":"b945b887cce54882f6a6076accf1bf2846fe455b","modified":1599309034244},{"_id":"themes/aircv/source/sass/base/_post.scss","hash":"b6e493c28d76f8670ddac030526979a949a095f3","modified":1599332036611},{"_id":"themes/aircv/source/sass/components/_button.scss","hash":"dd5c95a3b13e8f18d17e89e0949db176376a09f4","modified":1599309034244},{"_id":"themes/aircv/source/sass/components/_page-nav.scss","hash":"9167c0e1462a4b0502cde70ba9f152e2a8cde424","modified":1599309034244},{"_id":"themes/aircv/source/sass/components/_progress-bar.scss","hash":"1568b00b2143d6efc0562588bd86bf743ab49a6d","modified":1599309034244},{"_id":"themes/aircv/source/sass/components/_social-icons.scss","hash":"ccb16c829b910598ffa82f99ae5d2515c5081abc","modified":1599309034244},{"_id":"themes/aircv/source/sass/gui/_promo-block.scss","hash":"fc5d2764072a6ba3b5a02c1b370a52d200b1acfb","modified":1599309034244},{"_id":"themes/aircv/source/sass/gui/_service.scss","hash":"8e555b87aa75c5766aea1cb92588e0b2430bdf3c","modified":1608993857531},{"_id":"themes/aircv/source/sass/gui/_work.scss","hash":"dd8553558cc351766e87e6f101413f667c41db81","modified":1599316376268},{"_id":"themes/aircv/source/sass/layout/_contact.scss","hash":"6ecf70b2e5fdc0e5f31878a3d1ee7ccd48ff676d","modified":1599309034244},{"_id":"themes/aircv/source/sass/layout/_footer.scss","hash":"1f8a5e85e4c476a89c178907e6224cac37d3352a","modified":1599309034244},{"_id":"themes/aircv/source/sass/layout/_header.scss","hash":"317239255c9aa4870bece6b52c7edd61428db708","modified":1599309034244},{"_id":"themes/aircv/source/sass/plugins/_back-to-top.scss","hash":"89cde71e8681a5841b489e46bed33f808377789d","modified":1599309034244},{"_id":"themes/aircv/source/sass/plugins/_bootstrap-components.scss","hash":"9188b1ebaece0f9b75711d40fe5d8af7c051f490","modified":1599309034244},{"_id":"themes/aircv/source/sass/utils/_colors.scss","hash":"f286d3992e081b3bc1eb0cfe43b5176b55f28b84","modified":1599309034244},{"_id":"themes/aircv/source/sass/utils/_helpers.scss","hash":"665f4d167905e01e3aeded7f7437ac87ff3a2c38","modified":1606153336278},{"_id":"themes/aircv/source/vendor/jquery.min.map","hash":"8ba3fcc00250d861364f34632ac1f49da22a3e4c","modified":1599309034248},{"_id":"themes/aircv/source/vendor/masonry/imagesloaded.pkgd.min.js","hash":"cd9e64270abd6b7a2ccecac8c2b62b071c6720f9","modified":1599309034248},{"_id":"themes/aircv/source/vendor/masonry/jquery.masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1599309034248},{"_id":"themes/aircv/source/vendor/animate.css/animate.css","hash":"619625d017eadd7f30156ae2237f23ae7cc3b68d","modified":1599309034244},{"_id":"themes/aircv/layout/_partial/hexo/archive_item/first_post_item.ejs","hash":"8228ba9b0191ad95c0a3fad46d82a149de558d58","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/archive_item/post_item.ejs","hash":"0e836e4ecd716bca1dc54e56d1d0c55fa4c79eb2","modified":1606076763292},{"_id":"themes/aircv/layout/_partial/hexo/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/hexo/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/home/about/index.ejs","hash":"8385f4b942507f5b27005e81d4ff6e3b1ee3e739","modified":1620555094115},{"_id":"themes/aircv/layout/_partial/home/contact/index.ejs","hash":"9d17e045ceecdfa947ab17c41759c8296ef6946f","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/home/experience/index.ejs","hash":"7047aa4dd78e248c4a2f2bee0a68b3652296c1aa","modified":1599309034240},{"_id":"themes/aircv/layout/_partial/home/hero/index.ejs","hash":"4f95cdd5e2a8b5d7159ad2b3cd31b08e1a6b7765","modified":1599309034244},{"_id":"themes/aircv/layout/_partial/home/portfolio/index.ejs","hash":"70899f27625e31a7c451c755b7bc06a6d5a74dbd","modified":1599309034244},{"_id":"themes/aircv/layout/_partial/home/portfolio/masonry_grid.ejs","hash":"902d329b814c5f5f999ea20bf9004cc42739d755","modified":1599309034244},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.css","hash":"6c3f0c97a5c7e1ef6453d6b64e875b5eb141d397","modified":1599309034244},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.min.css.map","hash":"55253bf57e974dc89014e57783a1a4c737e7c867","modified":1599309034244},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.min.css","hash":"bcb96e31a2b8fed5575995fa0c58293e64972116","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap-theme.css.map","hash":"29d019dd007929a57c564b2b85785e4e12e58db2","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.min.css.map","hash":"95fb9d7b83bebc9c37cefee87514f5979ee8785d","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1599309034244},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"bb4c98b2ab088438cfaaebf2146cb5b4a1cedd43","modified":1599309034244},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/js/bootstrap.min.js","hash":"791aa054a026bddc0de92bad6cf7a1c6e73713d5","modified":1599309034248},{"_id":"themes/aircv/source/vendor/simple-line-icons/css/simple-line-icons.css","hash":"fdeed5b7a04f59936457d5f68bb43b0eef05be77","modified":1599309034248},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.svg","hash":"eba1f7ca1aaef4113fc376d4d324503fababbd75","modified":1599309034248},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf","hash":"1507cdbcd114a1236ece7c4c792d9d180c003079","modified":1599309034248},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.eot","hash":"616095b339d6a7fbb000aa4d8234bfdfa66af99b","modified":1599309034248},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2","hash":"24babfa4e0b5132eb8967861242dc1612bd562a5","modified":1599309034248},{"_id":"source/img/japon/templo.jpg","hash":"d875be2dfd60cd41c23f1694d95bf4a9a7750bbb","modified":1599309034240},{"_id":"source/img/perfil/photo_me.jpg","hash":"ce89febbc0e720c493ac17fccda33577ce6a465a","modified":1599309034244},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.min.css","hash":"8eb176c70b9cfa6871b76d6dc98fb526e7e9b3de","modified":1599309034248},{"_id":"themes/aircv/source/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff","hash":"efcd1b6bbdd2771ebc4b5eed6e03d703cd9bd33c","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/js/bootstrap.js","hash":"8cf4186ce86777b4b408ce308ca9f66dd421f509","modified":1599309034248},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.css","hash":"4316dcfb54e1b0a428e1d37203a4028fd0408298","modified":1599309034248},{"_id":"source/img/1920x1080/01.jpg","hash":"d530640ad342a2cb6e55d401cc197590dbda52d8","modified":1599309034244},{"_id":"themes/aircv/source/vendor/bootstrap/css/bootstrap.css.map","hash":"85cacfd84a6258ed0e193874efa31c87f86b9e87","modified":1599309034248},{"_id":"themes/aircv/source/img/1920x1080/01.jpg","hash":"d530640ad342a2cb6e55d401cc197590dbda52d8","modified":1599309034248},{"_id":"source/img/japon/templo_izquierda.jpg","hash":"e998478db4c4f3ce8c207ea68e2d8cd5c3086b53","modified":1599309034248},{"_id":"public/img/favicon/manifest.json","hash":"aebdc9d6447e8b045dccf52f3b6b4000442d927f","modified":1599411130530},{"_id":"public/img/small_logo-dark.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/thumb_logo-dark.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/medium_logo-dark.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/small_logo.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/thumb_logo.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/medium_logo.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/small_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/thumb_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/medium_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/small_02.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/thumb_02.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/medium_02.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/small_03.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/thumb_03.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x300/medium_03.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/800x400/small_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/800x400/thumb_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/800x400/medium_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x400/small_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x400/thumb_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/img/397x400/medium_01.jpg","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599411130530},{"_id":"public/2020/09/02/Este-camino-llamado-“codigo”/index.html","hash":"6e46a62c26c6bd4881c866c037976caa06b15804","modified":1606584685836},{"_id":"public/blog/index.html","hash":"84174ad18c3f52e3bf14f46a4b4da098a5778e9d","modified":1620586687649},{"_id":"public/blog/2020/index.html","hash":"f87a761b0bc6b9f15c92b465c721cc2beea98944","modified":1610701397185},{"_id":"public/blog/2020/09/index.html","hash":"b8ea94fe9a52a19025f5110d234ebe3fff821690","modified":1606584685836},{"_id":"public/index.html","hash":"c8345de146005f6df79178ffaaeb7a49ed89cfff","modified":1620586687649},{"_id":"public/img/favicon/small_android-icon-144x144.png","hash":"b9321ad5bd0e3346b5e2c385e9385a3da1ebb21a","modified":1599411130530},{"_id":"public/img/favicon/small_android-icon-192x192.png","hash":"7af61657e91a48a9a0871bfec186cd118331978a","modified":1599411130530},{"_id":"public/img/favicon/thumb_android-icon-144x144.png","hash":"d118a1a64428e1f9dd27ce4d47a68536e62e49a1","modified":1599411130530},{"_id":"public/img/favicon/small_android-icon-36x36.png","hash":"a784d3fe51760f6da46d11fe12a2d7e5f17ea4b9","modified":1599411130530},{"_id":"public/img/favicon/thumb_android-icon-192x192.png","hash":"959ac00fdd22234fbe0f2f91009ff7d5d8cf31d9","modified":1599411130530},{"_id":"public/img/favicon/thumb_android-icon-36x36.png","hash":"5a9bb86f2e7fe485b4cb129c0f4970b94e2f46c4","modified":1599411130530},{"_id":"public/img/favicon/small_android-icon-48x48.png","hash":"24a34d89988100097c94ae5db80fe995eaf4f9fe","modified":1599411130530},{"_id":"public/img/favicon/medium_android-icon-144x144.png","hash":"109fbecea541e9bca74d9de267eab5336a2d9651","modified":1599411130530},{"_id":"public/img/favicon/thumb_android-icon-48x48.png","hash":"b2e7f77e7b3a55acbf801642e05025e022f84cde","modified":1599411130530},{"_id":"public/img/favicon/medium_android-icon-36x36.png","hash":"9872937c17b448eb42b000cbb16ce7822ed46c21","modified":1599411130530},{"_id":"public/img/favicon/small_android-icon-72x72.png","hash":"9addb583b23be8101c1714a9769dd373ee84f67b","modified":1599411130530},{"_id":"public/img/favicon/medium_android-icon-192x192.png","hash":"598b2bda22ea56936850539cba4737f11e96e17b","modified":1610701397185},{"_id":"public/img/favicon/small_android-icon-96x96.png","hash":"8e2248661bd72bff7c63de126671ab270f1b5289","modified":1599411130530},{"_id":"public/img/favicon/thumb_android-icon-72x72.png","hash":"72f6f7d83f89df55843f44bb1fb7e370e36609ea","modified":1599411130530},{"_id":"public/img/favicon/medium_android-icon-48x48.png","hash":"30507a71c15ab060c585c1bda2530b051f31d8f8","modified":1599411130530},{"_id":"public/img/favicon/thumb_android-icon-96x96.png","hash":"811b70a21f43114bc43d1188f83d239ff736b78a","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-114x114.png","hash":"ef01d1b71ea90b28a62f5f662ae51da9cd322719","modified":1599411130530},{"_id":"public/img/favicon/medium_android-icon-72x72.png","hash":"b37edb9d27c5477b33a7c2586301c0168c0cbb78","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-120x120.png","hash":"065787360be8971a83a856f6cab6b474199a13fd","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-114x114.png","hash":"64098bc4c06e251bc4658ff991a34e3aed12df06","modified":1599411130530},{"_id":"public/img/favicon/medium_android-icon-96x96.png","hash":"7b0a46dd57e295945ebdeea25a781f54a42d04e6","modified":1610701397185},{"_id":"public/img/favicon/small_apple-icon-144x144.png","hash":"b9321ad5bd0e3346b5e2c385e9385a3da1ebb21a","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-120x120.png","hash":"340324100ce000ce588bd8ac9b19dda881cea3cc","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-114x114.png","hash":"31c07c4dfe665e837ecd3c3a340fb5d44738ad22","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-152x152.png","hash":"837d7cde5b9beb342fc77b9a387663141bb9d2fa","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-144x144.png","hash":"d118a1a64428e1f9dd27ce4d47a68536e62e49a1","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-120x120.png","hash":"0f4d8765bb4dd5bcdca2e896902cd365b6660408","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-180x180.png","hash":"9ce33bb31e5f70b357609f143f53aa30027ab4a7","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-152x152.png","hash":"c0235cb02966145390966cb51868124c9f10b97d","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-144x144.png","hash":"109fbecea541e9bca74d9de267eab5336a2d9651","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-57x57.png","hash":"4607bb4030ee1d4c09c7cc974f09de5a8996016e","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-180x180.png","hash":"8c18487843bd03a841abc6de007303cbcdc0e55f","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-57x57.png","hash":"8990a54ebe9c18cc4a11eb227f1e96fba340fc4d","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-152x152.png","hash":"b8b47631aa12f584089583b039a2993152bcc797","modified":1610701397185},{"_id":"public/img/favicon/small_apple-icon-60x60.png","hash":"b632e71c17efd349e025272d0ad973ad6a137ef4","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-60x60.png","hash":"0eff9a5db8d44bf40883435061cf6dbe99bc3f87","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-57x57.png","hash":"ea68b0c26ebf5c7b97a6dfa590dfdf7843bb7e07","modified":1610701397185},{"_id":"public/img/favicon/medium_apple-icon-180x180.png","hash":"287fee2dab9034523b6735ef248b532c13d00421","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-72x72.png","hash":"9addb583b23be8101c1714a9769dd373ee84f67b","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-76x76.png","hash":"0242f2141eea7936aa71d91141a41cc28d7d6f71","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-72x72.png","hash":"72f6f7d83f89df55843f44bb1fb7e370e36609ea","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-60x60.png","hash":"4235d4247a122dacda62c3fee4c90adeb348071a","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-76x76.png","hash":"f26e4535979d67b3ba420ada85001900fea0ed0a","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon-precomposed.png","hash":"b44688383b196a40bfd367a76247d337229bfd7d","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-72x72.png","hash":"b37edb9d27c5477b33a7c2586301c0168c0cbb78","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon-precomposed.png","hash":"40c44edee5bed036b543d75cd144fed01c4126b6","modified":1599411130530},{"_id":"public/img/favicon/small_apple-icon.png","hash":"b44688383b196a40bfd367a76247d337229bfd7d","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-76x76.png","hash":"9982f3fe93824be8dcbe9862ddfe096b2184d95c","modified":1610701397185},{"_id":"public/img/favicon/small_favicon-16x16.png","hash":"48e89ffff524dbb92c0bddae51286c50d5801eca","modified":1599411130530},{"_id":"public/img/favicon/thumb_favicon-16x16.png","hash":"fec48969ac53ccb85c56f6e544ba52303b618cb2","modified":1599411130530},{"_id":"public/img/favicon/medium_favicon-16x16.png","hash":"51393bc2d313c39af7bb16df67257ee686aeb589","modified":1599411130530},{"_id":"public/img/favicon/thumb_apple-icon.png","hash":"40c44edee5bed036b543d75cd144fed01c4126b6","modified":1599411130530},{"_id":"public/img/favicon/small_favicon-32x32.png","hash":"73928f198e2b0ff0ee4ed00119f143bc3381c38b","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon-precomposed.png","hash":"738778fe8347009d08d89c2fdd646607a8b215a3","modified":1610701397185},{"_id":"public/img/favicon/thumb_favicon-32x32.png","hash":"4d7d1d0932bd063ede37c2bb832a60bde63bced6","modified":1599411130530},{"_id":"public/img/favicon/small_favicon-96x96.png","hash":"8e2248661bd72bff7c63de126671ab270f1b5289","modified":1599411130530},{"_id":"public/img/favicon/thumb_favicon-96x96.png","hash":"811b70a21f43114bc43d1188f83d239ff736b78a","modified":1599411130530},{"_id":"public/img/favicon/medium_favicon-32x32.png","hash":"a3f7026a4fddd0d2c6a6afb35f5274402442c56b","modified":1599411130530},{"_id":"public/img/favicon/small_ms-icon-144x144.png","hash":"b9321ad5bd0e3346b5e2c385e9385a3da1ebb21a","modified":1599411130530},{"_id":"public/img/favicon/medium_apple-icon.png","hash":"738778fe8347009d08d89c2fdd646607a8b215a3","modified":1610701397185},{"_id":"public/img/favicon/small_ms-icon-150x150.png","hash":"093d38b8c5bad0863dc6e5bd0c236f66f33e9a98","modified":1599411130530},{"_id":"public/img/favicon/thumb_ms-icon-144x144.png","hash":"d118a1a64428e1f9dd27ce4d47a68536e62e49a1","modified":1599411130530},{"_id":"public/img/favicon/medium_favicon-96x96.png","hash":"7b0a46dd57e295945ebdeea25a781f54a42d04e6","modified":1610701397185},{"_id":"public/img/favicon/thumb_ms-icon-150x150.png","hash":"71e98e0e8fc5e0666a1e5f134057380c0c3558be","modified":1599411130530},{"_id":"public/img/favicon/small_ms-icon-70x70.png","hash":"69e3d93a703de5ab4a5a1ce442598fd5637b04e1","modified":1599411130530},{"_id":"public/img/favicon/thumb_ms-icon-70x70.png","hash":"106fc6df57604a012287ed5dbabad39ec08f5428","modified":1599411130530},{"_id":"public/img/favicon/medium_ms-icon-144x144.png","hash":"109fbecea541e9bca74d9de267eab5336a2d9651","modified":1599411130530},{"_id":"public/img/favicon/small_ms-icon-310x310.png","hash":"d64bc7add9becedbbe3d76dfbf5537ce8cd3dd2a","modified":1599411130530},{"_id":"public/img/favicon/medium_ms-icon-150x150.png","hash":"e551eb98412cd61b94c08c2c6b3501796d65af20","modified":1610701397185},{"_id":"public/img/favicon/medium_ms-icon-70x70.png","hash":"c8c180cc0a7e7e4d7a68ba6786ae1c31c2e5a90a","modified":1610701397185},{"_id":"public/img/favicon/thumb_ms-icon-310x310.png","hash":"53a96c3ab7c7c07fafc924c28e46ed86f7860175","modified":1599411130530},{"_id":"public/img/favicon/medium_ms-icon-310x310.png","hash":"d0cdadd4a1e0122361c5f5a164c12a0207af92a4","modified":1610701397185},{"_id":"public/img/homeWork/small_Logo_HomeworK.png","hash":"5e70fc065e945fa7b0de76518d4309a7d87a28f6","modified":1599411130530},{"_id":"public/img/homeWork/thumb_Logo_HomeworK.png","hash":"a2c4c1cc939022c910b49955d6f4f7ee358446d4","modified":1610701397185},{"_id":"public/img/firstPost/small_codeimg.jpg","hash":"90b80c0926558abd4b1bf97d1e12f42bb1bdbb62","modified":1599411130530},{"_id":"public/img/firstPost/medium_codeimg.jpg","hash":"a00bda4a2115034700c23f4a6eb6a6c5d6583ecd","modified":1599411130530},{"_id":"public/img/firstPost/thumb_codeimg.jpg","hash":"c5abf53a26bcdab7f916da26fb26cbbd918e5774","modified":1599411130530},{"_id":"public/img/japon/small_templo.jpg","hash":"99c4833057442278d8c98a4798821b46018e8a0c","modified":1599411130530},{"_id":"public/img/japon/thumb_templo.jpg","hash":"e2670fc2264635e110a3be4542a2788fab40a7c1","modified":1599411130530},{"_id":"public/img/japon/medium_templo.jpg","hash":"76078c9fd3fc5dc993eb5d3345ebab882e7bbce1","modified":1599411130530},{"_id":"public/img/perfil/small_photo_me.jpg","hash":"feb9a11b49b8f8be060bf57999462f52ab1a7009","modified":1599411130530},{"_id":"public/img/perfil/thumb_photo_me.jpg","hash":"e25f90ff6cd1d8364897faa9bbb74c90950d92e5","modified":1599411130530},{"_id":"public/img/1920x1080/small_01.jpg","hash":"da27dec01cf25ce8884c6562c594c93d0eca7401","modified":1599411130530},{"_id":"public/img/1920x1080/thumb_01.jpg","hash":"71437d1df45914f55f6f3bb95dd253a5b6e77d20","modified":1599411130530},{"_id":"public/img/perfil/medium_photo_me.jpg","hash":"99b22f2a66c83f6058aa1dad24ca35cb26f7b539","modified":1599411130530},{"_id":"public/img/1920x1080/medium_01.jpg","hash":"5d124d98e618acbe22329fd60c96d53ab2eff153","modified":1599411130530},{"_id":"public/img/homeWork/medium_Logo_HomeworK.png","hash":"0354619f8244947dc8e8a93cba71cc98ec13a877","modified":1610701397185},{"_id":"public/img/logo-dark.png","hash":"20b1d20909f1bf92305106e11a16986d832134f1","modified":1599411130530},{"_id":"public/img/logo.png","hash":"7986015da6e157ce0cccc11f27bdab159fc3bce1","modified":1599411130530},{"_id":"public/img/397x300/01.jpg","hash":"a6461d659a5980214f98fa881fd30908481442c5","modified":1599411130530},{"_id":"public/img/397x300/02.jpg","hash":"1671f94ac1e675d1dacd9d621229b020aa4391f3","modified":1599411130530},{"_id":"public/img/397x300/03.jpg","hash":"cab6e255b59fa68b8516cb1ddb5e5da829b58de6","modified":1599411130530},{"_id":"public/img/800x400/01.jpg","hash":"9d283ae70fbdf1b6d915f86a3dc699fe62ee459b","modified":1599411130530},{"_id":"public/img/397x400/01.jpg","hash":"7fd0a6cfca204d75d74cca797baf7f7b59bc4ec7","modified":1599411130530},{"_id":"public/img/favicon/android-icon-144x144.png","hash":"6b9f10385d2cad54ede15614912d5f42f7f26ddd","modified":1599411130530},{"_id":"public/img/favicon/android-icon-192x192.png","hash":"5a326851f86461a04399eef69882bbfd8de28941","modified":1599411130530},{"_id":"public/img/favicon/android-icon-36x36.png","hash":"f835095277914c478d87d8d45dda71fdb792d686","modified":1599411130530},{"_id":"public/img/favicon/android-icon-48x48.png","hash":"5c437a3957bb8886c89d51ed63ee95fe8a50feb4","modified":1599411130530},{"_id":"public/img/favicon/android-icon-72x72.png","hash":"01ee2f49b81ae8003c1042d3b2352c6273fda39a","modified":1599411130530},{"_id":"public/img/favicon/android-icon-96x96.png","hash":"94142a890e3cf11543c9b72ade5e31d0c1bf6f57","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-114x114.png","hash":"999d34be4db42ace0e6809e51a7266a07bbbaa48","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-120x120.png","hash":"1b43b590d49408a16cfccae5713137071f43a958","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-144x144.png","hash":"6b9f10385d2cad54ede15614912d5f42f7f26ddd","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-152x152.png","hash":"77bb61340a7e29ff4c724ccf17d0bd4b9ac4e043","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-180x180.png","hash":"284257d193b670df90fe3094bee68ba4e6f4c509","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-57x57.png","hash":"04ac3c9261a5dffcc5a4ff1fe4dbff902bd7f7e7","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-60x60.png","hash":"73f243ed4b3cb91a09ad45f954fcaea47f7b17b7","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-72x72.png","hash":"01ee2f49b81ae8003c1042d3b2352c6273fda39a","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-76x76.png","hash":"82721f285ae1c470e0b79d138805c6f9fb155863","modified":1599411130530},{"_id":"public/img/favicon/apple-icon-precomposed.png","hash":"c5ef3c1ebf752d66b9e10d816c26c23c8a6c1f1c","modified":1599411130530},{"_id":"public/img/favicon/apple-icon.png","hash":"c5ef3c1ebf752d66b9e10d816c26c23c8a6c1f1c","modified":1599411130530},{"_id":"public/img/favicon/favicon-16x16.png","hash":"0dcd1c5f57d9a82eedd8f8b8e9350380c4fc9d9c","modified":1599411130530},{"_id":"public/img/favicon/favicon-32x32.png","hash":"33ca98e15db567d5daa31de50806adc958f6aef1","modified":1599411130530},{"_id":"public/img/favicon/favicon-96x96.png","hash":"94142a890e3cf11543c9b72ade5e31d0c1bf6f57","modified":1599411130530},{"_id":"public/img/favicon/favicon.ico","hash":"5667c08915d50311bcfa638e29281575fd88f6ef","modified":1599411130530},{"_id":"public/img/favicon/ms-icon-144x144.png","hash":"6b9f10385d2cad54ede15614912d5f42f7f26ddd","modified":1599411130530},{"_id":"public/img/favicon/ms-icon-150x150.png","hash":"7ad806c2c659089791d6d2ceee80b735d9620a85","modified":1599411130530},{"_id":"public/img/favicon/ms-icon-70x70.png","hash":"746a38448824d93a3c13d47c1cff797cf7e5a270","modified":1599411130530},{"_id":"public/fonts/fontello.eot","hash":"823bcbcbaa428e6f2a16cd5e0e0de251ef052487","modified":1599411130530},{"_id":"public/fonts/fontello.svg","hash":"dbf4e8a2992307a8e30093dc126643febe4832bb","modified":1599411130530},{"_id":"public/fonts/fontello.ttf","hash":"122ac1f5d3c4b855bd8c26cc29f12963be173a0e","modified":1599411130530},{"_id":"public/fonts/fontello.woff","hash":"5f8fb330ea74404786ff512e9125b54c1acadb4d","modified":1599411130530},{"_id":"public/fonts/fontello.woff2","hash":"d3a6780844bc138ca017f105a95a75c6118d6049","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap-theme.min.css.map","hash":"55253bf57e974dc89014e57783a1a4c737e7c867","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap-theme.css.map","hash":"29d019dd007929a57c564b2b85785e4e12e58db2","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap.min.css.map","hash":"95fb9d7b83bebc9c37cefee87514f5979ee8785d","modified":1599411130530},{"_id":"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1599411130530},{"_id":"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"bb4c98b2ab088438cfaaebf2146cb5b4a1cedd43","modified":1599411130530},{"_id":"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1599411130530},{"_id":"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1599411130530},{"_id":"public/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1599411130530},{"_id":"public/vendor/simple-line-icons/fonts/Simple-Line-Icons.svg","hash":"eba1f7ca1aaef4113fc376d4d324503fababbd75","modified":1599411130530},{"_id":"public/vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf","hash":"1507cdbcd114a1236ece7c4c792d9d180c003079","modified":1599411130530},{"_id":"public/vendor/simple-line-icons/fonts/Simple-Line-Icons.eot","hash":"616095b339d6a7fbb000aa4d8234bfdfa66af99b","modified":1599411130530},{"_id":"public/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2","hash":"24babfa4e0b5132eb8967861242dc1612bd562a5","modified":1599411130530},{"_id":"public/img/favicon/ms-icon-310x310.png","hash":"103003882e0b9afec0b71b69ef5849ccd464638f","modified":1599411130530},{"_id":"public/img/firstPost/codeimg.jpg","hash":"c251d592ccf8b355660c1c90368d2a8953280208","modified":1599411130530},{"_id":"public/img/homeWork/Logo_HomeworK.png","hash":"a1e0243daded97fee2db350f741aeb1d4b3625e5","modified":1599411130530},{"_id":"public/img/japon/small_templo_izquierda.jpg","hash":"2a23bdf33cfb193b0f99cfdb6e411f9dd697cc50","modified":1599411130530},{"_id":"public/js/layout.js","hash":"9028c4e0caaa87a515a632a708265dd9084fa473","modified":1599411130530},{"_id":"public/js/layout.min.js","hash":"15f5461988413ceb69c3ea0972f25d4431de3eae","modified":1599411130530},{"_id":"public/vendor/jquery-migrate.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1599411130530},{"_id":"public/vendor/jquery.appear.js","hash":"1ee3d2e29b6279f1986cd878072780d596250878","modified":1599411130530},{"_id":"public/vendor/jquery.back-to-top.js","hash":"783409f41ecf7983bfe8d04d81abf79e2b643fa6","modified":1599411130530},{"_id":"public/vendor/jquery.easing.js","hash":"5249ba97aa63b8555f1629d6470fd5223e818ead","modified":1599411130530},{"_id":"public/vendor/jquery.parallax.min.js","hash":"c52476c9451fc0d754510a19a131fd05dfa21527","modified":1599411130530},{"_id":"public/vendor/jquery.wow.min.js","hash":"d653b2ed6a5d94f718b4ddcbef28d57bd8668cef","modified":1599411130530},{"_id":"public/js/components/masonry.js","hash":"f73c104193a317eca446b6d142e209565f2e980c","modified":1599411130530},{"_id":"public/js/components/masonry.min.js","hash":"9daaaaf8f3c423990bb8e6cb0048ba54e0ab2be4","modified":1599411130530},{"_id":"public/js/components/progress-bar.js","hash":"b90e2fc35b6a827da39d0c91e4b0f0b6dc293de2","modified":1599411130530},{"_id":"public/js/components/progress-bar.min.js","hash":"538c610a4427bcb5a50fa5710775bae516510f6f","modified":1599411130530},{"_id":"public/js/components/wow.js","hash":"f85e1198ed7e577671957e3d65c699ddfc28f317","modified":1599411130530},{"_id":"public/js/components/wow.min.js","hash":"c90df564b8fb6cdb1cb682d9be9e627662a7d32d","modified":1599411130530},{"_id":"public/vendor/masonry/imagesloaded.pkgd.min.js","hash":"cd9e64270abd6b7a2ccecac8c2b62b071c6720f9","modified":1599411130530},{"_id":"public/vendor/bootstrap/js/npm.js","hash":"e2b7590d6ec1fdac66b01fdf66ae0879f53b1262","modified":1599411130530},{"_id":"public/vendor/simple-line-icons/css/simple-line-icons.css","hash":"fdeed5b7a04f59936457d5f68bb43b0eef05be77","modified":1599411130530},{"_id":"public/vendor/jquery.min.js","hash":"44a33096a0498722bc286c5f190d37b070db2d23","modified":1599411130530},{"_id":"public/vendor/masonry/jquery.masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1599411130530},{"_id":"public/vendor/animate.css/animate.css","hash":"e56fb7e673693eb0b234e2033b0760c5d3ae778a","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap-theme.css","hash":"6c3f0c97a5c7e1ef6453d6b64e875b5eb141d397","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap-theme.min.css","hash":"bcb96e31a2b8fed5575995fa0c58293e64972116","modified":1599411130530},{"_id":"public/vendor/bootstrap/js/bootstrap.min.js","hash":"791aa054a026bddc0de92bad6cf7a1c6e73713d5","modified":1599411130530},{"_id":"public/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff","hash":"efcd1b6bbdd2771ebc4b5eed6e03d703cd9bd33c","modified":1599411130530},{"_id":"public/vendor/jquery.min.map","hash":"8ba3fcc00250d861364f34632ac1f49da22a3e4c","modified":1599411130530},{"_id":"public/sass/fontello.css","hash":"2c1009bf43f59f9455aba2e9a5e6e8ed9d1feb08","modified":1599411130530},{"_id":"public/img/japon/thumb_templo_izquierda.jpg","hash":"87c8663b9b73e33aac07252184f24a509d4e5390","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap.min.css","hash":"8eb176c70b9cfa6871b76d6dc98fb526e7e9b3de","modified":1599411130530},{"_id":"public/vendor/bootstrap/js/bootstrap.js","hash":"8cf4186ce86777b4b408ce308ca9f66dd421f509","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap.css","hash":"4316dcfb54e1b0a428e1d37203a4028fd0408298","modified":1599411130530},{"_id":"public/img/japon/medium_templo_izquierda.jpg","hash":"153df15fc3031974c76b1ac8e14ecbddac6ed7ed","modified":1599411130530},{"_id":"public/img/perfil/photo_me.jpg","hash":"ce89febbc0e720c493ac17fccda33577ce6a465a","modified":1599411130530},{"_id":"public/img/japon/templo.jpg","hash":"d875be2dfd60cd41c23f1694d95bf4a9a7750bbb","modified":1599411130530},{"_id":"public/vendor/bootstrap/css/bootstrap.css.map","hash":"85cacfd84a6258ed0e193874efa31c87f86b9e87","modified":1599411130530},{"_id":"public/img/1920x1080/01.jpg","hash":"d530640ad342a2cb6e55d401cc197590dbda52d8","modified":1599411130530},{"_id":"public/img/japon/templo_izquierda.jpg","hash":"e998478db4c4f3ce8c207ea68e2d8cd5c3086b53","modified":1599411130530},{"_id":"public/sass/layout.css","hash":"f945497b8e4c5cdee360959f14ca6d5e91398ae1","modified":1599411130530},{"_id":"source/_drafts/React-Testing.md","hash":"9e74e05ee54bc666bdb14da13389d02ae646d1f1","modified":1606074709105},{"_id":"source/_posts/React-Testing.md","hash":"3beb0ba3a3be9db6e11ec158d0aa6f3e25c19f96","modified":1610696812936},{"_id":"public/blog/2020/11/index.html","hash":"67306f5b87193e35bd70e3efb595b363c69146d2","modified":1610701397185},{"_id":"public/2020/11/28/React-Testing/index.html","hash":"1a506d6358afe9983395dcf2a0aed6b9c35e92bf","modified":1610701397185},{"_id":"source/_posts/Testing-segunda-parte.md","hash":"26a1a0254ca670113612753dbd9902d7e6320504","modified":1620557169154},{"_id":"public/blog/2021/index.html","hash":"559e0b862bf29809776a4745e61644b02964323d","modified":1620586687649},{"_id":"public/blog/2021/01/index.html","hash":"b75740795b51a3a8313786c43bf8c840f1b5f9ac","modified":1620586687649},{"_id":"public/2021/01/15/Testing-segunda-parte/index.html","hash":"768248b15124e2d229adf05a375c952a4826980c","modified":1620586687649},{"_id":"source/_drafts/Untitled.md","hash":"7eb205744d3033dba618aee8014ba90e6c32a037","modified":1620553756290},{"_id":"source/img/huellapositiva/cropped-Logo-Huella-Positiva-PV-05-fondo2.png","hash":"7662ddedee4c7922777c483b2917bd0031a75ef6","modified":1620560472422},{"_id":"source/img/ecommerce/logo-ecommerce.png","hash":"1fd7d414a1d907a885131a002bd0ce3948d29706","modified":1620585801756},{"_id":"source/img/moviesforworld/moviesforworld.png","hash":"2ee89f21753743b817853c9fa241cda78b3dc1bd","modified":1620583607350},{"_id":"public/img/moviesforworld/small_moviesforworld.png","hash":"5c6f8a04fef644d34fec6cea9edf9d03447e4801","modified":1620586687649},{"_id":"public/img/huellapositiva/small_cropped-Logo-Huella-Positiva-PV-05-fondo2.png","hash":"29f50b0602d5ac83a073d2bce637e259ffbfcce8","modified":1620586687649},{"_id":"public/img/moviesforworld/thumb_moviesforworld.png","hash":"62891209a1e5a7e1d0eac8d5fe0787f69ee727ba","modified":1620586687649},{"_id":"public/img/ecommerce/small_logo-ecommerce.png","hash":"0547ef46dd64fe1cd685b33511fb0a323063bc7e","modified":1620586687649},{"_id":"public/img/ecommerce/thumb_logo-ecommerce.png","hash":"924961e04cbb9d7130ed01525caab85f293b146d","modified":1620586687649},{"_id":"public/img/moviesforworld/medium_moviesforworld.png","hash":"f4fa2ce8972b8224c63a5214c812c92803056331","modified":1620586687649},{"_id":"public/img/moviesforworld/moviesforworld.png","hash":"2ee89f21753743b817853c9fa241cda78b3dc1bd","modified":1620586687649},{"_id":"public/img/ecommerce/logo-ecommerce.png","hash":"1fd7d414a1d907a885131a002bd0ce3948d29706","modified":1620586687649},{"_id":"public/img/huellapositiva/cropped-Logo-Huella-Positiva-PV-05-fondo2.png","hash":"7662ddedee4c7922777c483b2917bd0031a75ef6","modified":1620586687649},{"_id":"public/img/huellapositiva/thumb_cropped-Logo-Huella-Positiva-PV-05-fondo2.png","hash":"96300d1bb1f8e341a78ec21f2b51dd05e84fb0b4","modified":1620586687649},{"_id":"public/img/ecommerce/medium_logo-ecommerce.png","hash":"bf1c25a4e86e56241d7fca2b85ee23c591e04e81","modified":1620586687649},{"_id":"public/img/huellapositiva/medium_cropped-Logo-Huella-Positiva-PV-05-fondo2.png","hash":"14be7c1345456f066edba575943e52ed9856eb27","modified":1620586687649}],"Category":[],"Data":[{"_id":"contact","data":{"title":"Contacto","subtitle":"Medios de contacto.","items":[{"title":"Email","content":"oiranca@gmail.com"},{"title":"Perfil Linkedin","content":"Samuel Romero Arbelo","href":"#"}]}},{"_id":"about","data":{"title":"Un poco de mí","subtitle":"Curioso por naturaleza.","image":"img/perfil/photo_me.jpg","description":"<p>Mi nombre es <strong>Samuel Romero Arbelo</strong> soy de un pequeño pueblo llamado Ingenio, en la provincia de Las Palmas.</p>\n<p> Soy una persona <strong>curiosa</strong>, que le gusta estar siempre <strong>investigando</strong>, <strong>autodidacta</strong> ..., pero tengo que admitir que donde esté un buen equipo en el que todos aprendamos, me siento muy cómodo</p>\n<p>Empecé en este mundillo cuando tenía unos 21 años, en un Ciclo de Grado Superior de Telecomunicaciones en Informática, donde ví <strong>C++</strong>, pero por capricho de la vida, mi camino no fue el de la programación, aunque siempre se quedó dentro de mí el no poder dedicarme a ello.\n<p>Actualmente, he terminado el <strong>Ciclo Superior de Desarrollo de Aplicaciones Multiplataformas</strong>, el cual se ha centrado en adquirir comocimientos en leguaje de proagramación como <strong>Java</strong>, en base de datos <strong>SQL</strong> o framework como <strong>Android</strong>, al terminar he podido realizar las prácticas de empresa en <strong>Lean Mind </strong>.</p>\n<p>Para introducirme en <strong>Frontend</strong> he realizado varios cursos y un bootcamp donde he podido adquirir conocimientos de <strong>JavaScript</strong>, <strong>Angular</strong>, <strong>HTML5</strong>, <strong>CSS3</strong> y <strong> React </strong>.</p>\n<p>Hoy en día sigo formándome, pero esta vez con un bootcamp orientado a <strong> Backend </strong> donde he podido ver <strong> Node.js, Express, MongoDB, Git,.. </strong>.</p>","skills":[{"name":"JavaScript / TypeScript"},{"name":"Angular / React"},{"name":"HTML5 / CSS3 / Sass"},{"name":"Node.js / Express"},{"name":"Java"}]}},{"_id":"footer","data":{"line_01":"&copy 2020 Samuel Romero Arbelo"}},{"_id":"experience","data":{"title":"Experiencia","subtitle":"La propia vida.","items":[{"title":"Prácticas de Empresa en Lean Mind","content":"Las prácticas las he desarrollado como colaborador, en un proyecto open source para la plataforma Huella Positiva, en la cual hemos desarrollado el frontend con React.","href":"https://leanmind.es/es/","icon":"icon-info","featured":false}]}},{"_id":"hero","data":{"title":"Samuel Romero Arbelo","proposal_value":"Junior Developer","image":"img/japon/templo_izquierda.jpg"}},{"_id":"logo","data":{"image":"","image_dark":"","text":"","text_dark":""}},{"_id":"portfolio","data":{"title":"Proyectos","subtitle":"Siempre aprendiendo.","items":[{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/homeWork/Logo_HomeworK.png","hide_text":"Hide","title":"HomeWork (Android / Web)","subtitle":"Proyecto en Android y su versión Web","description":"<h2><b>HomeWork en Android</b> </h2> <p>En la versión de <b>android</b> he usado como tecnología <b>Java 8</b>, los datos de lo usuarios y todo lo necesario para el funcionamiento de la aplicación están alojados<b> en Firebase</b>. <h2><b>HomeWork Web</b> </h2> <p>En la versión <b>Web</b> he realizado la parte del frontend con <b>Angular 8</b> mientras que el backend ha sido desarrollado con <b>Node.js y Express</b>, montando una base de datos en <b>Mongodb</b>.</p>\n<h4><b><i>La versión web sigue en desarrollo.</i></b></h4>","tags":[{"text":"Versión Android","href":"https://github.com/Oiranca/pgl-project"},{"text":"Versión Web (Frontend) ","href":"https://github.com/Oiranca/frontend-homework"},{"text":"Versión Web (Backend)","href":"https://github.com/Oiranca/backend-homework"}],"parameters":[{"title":"Versión en Android","text":"Java / Firebase"},{"title":"Versión Web","text":"Angular 8 / Node.js / Express / Mongodb"}]},{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/huellapositiva/cropped-Logo-Huella-Positiva-PV-05-fondo2.png","hide_text":"Hide","title":"Huella Positiva (Web)","subtitle":"Proyecto Colaborativo","description":"<p>Es un proyecto colaborativo para una ONG llamada <i><strong>Soy Mamut</strong></i>, donde formo parte el equipo de <strong>FrontEnd</strong>.</p>\n<p>Juntos estamos migrando su web de <strong>Wordpress</strong> a <strong> React. </strong></p> ","cta":"Web Original HuellaPositiva","href":"https://huellapositiva.com/?fbclid=IwAR0yqc2Hwb4tNGAvt0bNT_3Uyx6kPxfuDRD226XI2b-p_hn9e8tmPEM2_8U","tags":[{"text":"Repositorio Frontend ","href":"https://github.com/ayudadigital/huelladigital-frontend"},{"text":"Repositorio Backend ","href":"https://github.com/ayudadigital/huelladigital-backend"}],"parameters":[{"title":"Lenguaje","text":"TypeScript"},{"title":"Testing","text":"Jest / Testing Library"}]},{"grid_class":"col-xs-12 col-sm-6 col-md-6 md-margin-b-4","image":"img/moviesforworld/moviesforworld.png","hide_text":"Hide","title":"Movies for Word (Web)","subtitle":"Aplicación para buscar en The Movie Database API","description":"<p>Pequeña aplicación web que nos permitirá buscar y mostrar títulos de películas, consumiendo <strong> The Movie Database API</strong>. </p>\n<p> Ha sido desarrollada con <strong>React</strong> y he usa la librería<strong> React Redux</strong> para controlar los estados de los componentes.</p> ","cta":"The Movie Database API","href":"https://developers.themoviedb.org/3/getting-started/introduction","tags":[{"text":"Repositorio ","href":"https://github.com/Oiranca/reto-final-frontend"}],"parameters":[{"title":"Lenguaje","text":"JavaScript"},{"title":"Estilo","text":"Sass"}]},{"grid_class":"col-xs-12 col-sm-6 col-md- md-margin-b-4","image":"img/ecommerce/logo-ecommerce.png","hide_text":"Hide","title":"Ecommerce","subtitle":"Backend ecommerce","description":"<p>Pequeño <strong> Backend</strong> para un supuesto comercio electrónico.</p>\n<p> Está desarrollado en <strong>JavaScript</strong> con <strong>Node.js</strong>, <strong>Express.js</strong> y como base de datos <strong>MongoDB</strong></p> ","tags":[{"text":"Repositorio","href":"https://github.com/Oiranca/ecommerce-backend"}],"parameters":[{"title":"Lenguaje","text":"JavaScript"},{"title":"Entorno de ejecución","text":"Node.js"},{"title":"Framework","text":"Express.js"},{"title":"Base de datos","text":"MongoDB"}]}]}},{"_id":"menu","data":[{"text":"Incio","href":"#body"},{"text":"Un poco de mí","href":"#about"},{"text":"Experiencia","href":"#experience"},{"text":"Proyectos","href":"#work"},{"text":"Contacto","href":"#contact"},{"text":"Blog","href":"blog"}]},{"_id":"social","data":[{"text":"Github","href":"https://github.com/Oiranca","icon":"icon-social-github"},{"text":"Twitter","href":"https://twitter.com/Oiranca","icon":"icon-social-twitter"},{"text":"Linkedin","href":"https://www.linkedin.com/in/samuel-romero-arbelo/","icon":"icon-social-linkedin"}]}],"Page":[{"_content":"{\n \"name\": \"App\",\n \"icons\": [\n  {\n   \"src\": \"\\/android-icon-36x36.png\",\n   \"sizes\": \"36x36\",\n   \"type\": \"image\\/png\",\n   \"density\": \"0.75\"\n  },\n  {\n   \"src\": \"\\/android-icon-48x48.png\",\n   \"sizes\": \"48x48\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-72x72.png\",\n   \"sizes\": \"72x72\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.5\"\n  },\n  {\n   \"src\": \"\\/android-icon-96x96.png\",\n   \"sizes\": \"96x96\",\n   \"type\": \"image\\/png\",\n   \"density\": \"2.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-144x144.png\",\n   \"sizes\": \"144x144\",\n   \"type\": \"image\\/png\",\n   \"density\": \"3.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-192x192.png\",\n   \"sizes\": \"192x192\",\n   \"type\": \"image\\/png\",\n   \"density\": \"4.0\"\n  }\n ]\n}","source":"img/favicon/manifest.json","raw":"{\n \"name\": \"App\",\n \"icons\": [\n  {\n   \"src\": \"\\/android-icon-36x36.png\",\n   \"sizes\": \"36x36\",\n   \"type\": \"image\\/png\",\n   \"density\": \"0.75\"\n  },\n  {\n   \"src\": \"\\/android-icon-48x48.png\",\n   \"sizes\": \"48x48\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-72x72.png\",\n   \"sizes\": \"72x72\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.5\"\n  },\n  {\n   \"src\": \"\\/android-icon-96x96.png\",\n   \"sizes\": \"96x96\",\n   \"type\": \"image\\/png\",\n   \"density\": \"2.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-144x144.png\",\n   \"sizes\": \"144x144\",\n   \"type\": \"image\\/png\",\n   \"density\": \"3.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-192x192.png\",\n   \"sizes\": \"192x192\",\n   \"type\": \"image\\/png\",\n   \"density\": \"4.0\"\n  }\n ]\n}","date":"2020-09-05T12:30:34.240Z","updated":"2020-09-05T12:30:34.240Z","path":"img/favicon/manifest.json","layout":"false","title":"","comments":1,"_id":"ckerc3b1t000278hdg06lahcs","content":"{\"name\":\"App\",\"icons\":[{\"src\":\"/android-icon-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/android-icon-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/android-icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/android-icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/android-icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/android-icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"}]}","site":{"data":{"contact":{"title":"Contacto","subtitle":"Medios de contacto.","items":[{"title":"Email","content":"oiranca@gmail.com"},{"title":"Perfil Linkedin","content":"Samuel Romero Arbelo","href":"#"}]},"about":{"title":"Un poco de mí","subtitle":"Curioso por naturaleza.","image":"img/perfil/photo_me.jpg","description":"<p>Mi nombre es <strong>Samuel Romero Arbelo</strong> soy de un pequeño pueblo llamado Ingenio, en la provincia de Las Palmas.</p>\n<p> Soy una persona <strong>curiosa</strong>, que le gusta estar siempre <strong>investigando</strong>, <strong>autodidacta</strong> ..., pero tengo que admitir que donde esté un buen equipo en el que todos aprendamos, me siento muy cómodo</p>\n<p>Empecé en este mundillo cuando tenía unos 21 años, en un Ciclo de Grado Superior de Telecomunicaciones en Informática, donde ví <strong>C++</strong>, pero por capricho de la vida, mi camino no fue el de la programación, aunque siempre se quedó dentro de mí el no poder dedicarme a ello.\n<p> Actualmente, he terminado el Ciclo Superior de Desarrollo de <strong>Aplicaciones Multiplataformas</strong> y por mi parte he realizado varios cursos de <strong>JavaScript</strong>, <strong>Angular</strong>, <strong>HTML5</strong>, <strong>CSS3</strong> y hoy en día sigo formándome <i><strong>(eso nunca va a parar)</strong></i>, en un bootcamp de <strong>Frontend</strong>, donde estoy reforzando conocimientos, pero también aprendiendo tenologías nuevas como <strong> React </strong>y seguiré con otro de Backend y para finalizar esta formación, uno de Agile.</p>","skills":[{"name":"Java","percentage":60},{"name":"HTML5","percentage":70},{"name":"CSS3","percentage":52},{"name":"Angular","percentage":40},{"name":"JavaScript / TypeScript","percentage":60}]},"footer":{"line_01":"&copy 2020 Samuel Romero Arbelo"},"experience":{"title":"Experiencia","subtitle":"La propia vida.","items":[{"title":"En construcción","content":"Esperando mi primera oportunidad","icon":"icon-info","featured":false}]},"hero":{"title":"Samuel Romero Arbelo","proposal_value":"Junior Developer","image":"img/japon/templo_izquierda.jpg"},"logo":{"image":"","image_dark":"","text":"","text_dark":""},"portfolio":{"title":"Proyectos","subtitle":"Siempre aprendiendo.","items":[{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/homeWork/Logo_HomeworK.png","hide_text":"Hide","title":"HomeWork (Android / Web)","subtitle":"Proyecto en Android y su versión Web","description":"<h2><b>HomeWork en Android</b> </h2> <p>En la versión de <b>android</b> he usado como tecnología <b>Java 8</b>, los datos de lo usuarios y todo lo necesario para el funcionamiento de la aplicación están alojados<b> en Firebase</b>. <h2><b>HomeWork Web</b> </h2> <p>En la versión <b>Web</b> he realizado la parte del frontend con <b>Angular 8</b> mientras que el backend ha sido desarrollado con <b>Node.js y Express</b>, montando una base de datos en <b>Mongodb</b>.</p>\n<h4><b><i>La versión web sigue en desarrollo.</i></b></h4>","tags":[{"text":"Versión Android","href":"https://github.com/Oiranca/pgl-project"},{"text":"Versión Web (Frontend) ","href":"https://github.com/Oiranca/frontend-homework"},{"text":"Versión Web (Backend)","href":"https://github.com/Oiranca/backend-homework"}],"parameters":[{"title":"Versión en Android","text":"Java / Firebase"},{"title":"Versión Web","text":"Angular 8 / Node.js / Express / Mongodb"}]}]},"menu":[{"text":"Incio","href":"#body"},{"text":"Un poco de mí","href":"#about"},{"text":"Experiencia","href":"#experience"},{"text":"Proyectos","href":"#work"},{"text":"Contacto","href":"#contact"},{"text":"Blog","href":"blog"}],"social":[{"text":"Github","href":"https://github.com/Oiranca","icon":"icon-social-github"},{"text":"Twitter","href":"https://twitter.com/Oiranca","icon":"icon-social-twitter"},{"text":"Linkedin","href":"https://www.linkedin.com/in/samuel-romero-arbelo/","icon":"icon-social-linkedin"}]}},"excerpt":"","more":"{\"name\":\"App\",\"icons\":[{\"src\":\"/android-icon-36x36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/android-icon-48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/android-icon-72x72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/android-icon-96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/android-icon-144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/android-icon-192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"}]}"}],"Post":[{"title":"Hello World","date":"2020-07-19T14:46:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_drafts/hello-world.md","raw":"title: Hello World\ntags: []\ncategories: []\ndate: 2020-07-19 15:46:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":0,"updated":"2020-09-05T12:30:34.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckerc3b0t000078hdh1tde2kn","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"contact":{"title":"Contacto","subtitle":"Medios de contacto.","items":[{"title":"Email","content":"oiranca@gmail.com"},{"title":"Perfil Linkedin","content":"Samuel Romero Arbelo","href":"#"}]},"about":{"title":"Un poco de mí","subtitle":"Curioso por naturaleza.","image":"img/perfil/photo_me.jpg","description":"<p>Mi nombre es <strong>Samuel Romero Arbelo</strong> soy de un pequeño pueblo llamado Ingenio, en la provincia de Las Palmas.</p>\n<p> Soy una persona <strong>curiosa</strong>, que le gusta estar siempre <strong>investigando</strong>, <strong>autodidacta</strong> ..., pero tengo que admitir que donde esté un buen equipo en el que todos aprendamos, me siento muy cómodo</p>\n<p>Empecé en este mundillo cuando tenía unos 21 años, en un Ciclo de Grado Superior de Telecomunicaciones en Informática, donde ví <strong>C++</strong>, pero por capricho de la vida, mi camino no fue el de la programación, aunque siempre se quedó dentro de mí el no poder dedicarme a ello.\n<p> Actualmente, he terminado el Ciclo Superior de Desarrollo de <strong>Aplicaciones Multiplataformas</strong> y por mi parte he realizado varios cursos de <strong>JavaScript</strong>, <strong>Angular</strong>, <strong>HTML5</strong>, <strong>CSS3</strong> y hoy en día sigo formándome <i><strong>(eso nunca va a parar)</strong></i>, en un bootcamp de <strong>Frontend</strong>, donde estoy reforzando conocimientos, pero también aprendiendo tenologías nuevas como <strong> React </strong>y seguiré con otro de Backend y para finalizar esta formación, uno de Agile.</p>","skills":[{"name":"Java","percentage":60},{"name":"HTML5","percentage":70},{"name":"CSS3","percentage":52},{"name":"Angular","percentage":40},{"name":"JavaScript / TypeScript","percentage":60}]},"footer":{"line_01":"&copy 2020 Samuel Romero Arbelo"},"experience":{"title":"Experiencia","subtitle":"La propia vida.","items":[{"title":"En construcción","content":"Esperando mi primera oportunidad","icon":"icon-info","featured":false}]},"hero":{"title":"Samuel Romero Arbelo","proposal_value":"Junior Developer","image":"img/japon/templo_izquierda.jpg"},"logo":{"image":"","image_dark":"","text":"","text_dark":""},"portfolio":{"title":"Proyectos","subtitle":"Siempre aprendiendo.","items":[{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/homeWork/Logo_HomeworK.png","hide_text":"Hide","title":"HomeWork (Android / Web)","subtitle":"Proyecto en Android y su versión Web","description":"<h2><b>HomeWork en Android</b> </h2> <p>En la versión de <b>android</b> he usado como tecnología <b>Java 8</b>, los datos de lo usuarios y todo lo necesario para el funcionamiento de la aplicación están alojados<b> en Firebase</b>. <h2><b>HomeWork Web</b> </h2> <p>En la versión <b>Web</b> he realizado la parte del frontend con <b>Angular 8</b> mientras que el backend ha sido desarrollado con <b>Node.js y Express</b>, montando una base de datos en <b>Mongodb</b>.</p>\n<h4><b><i>La versión web sigue en desarrollo.</i></b></h4>","tags":[{"text":"Versión Android","href":"https://github.com/Oiranca/pgl-project"},{"text":"Versión Web (Frontend) ","href":"https://github.com/Oiranca/frontend-homework"},{"text":"Versión Web (Backend)","href":"https://github.com/Oiranca/backend-homework"}],"parameters":[{"title":"Versión en Android","text":"Java / Firebase"},{"title":"Versión Web","text":"Angular 8 / Node.js / Express / Mongodb"}]}]},"menu":[{"text":"Incio","href":"#body"},{"text":"Un poco de mí","href":"#about"},{"text":"Experiencia","href":"#experience"},{"text":"Proyectos","href":"#work"},{"text":"Contacto","href":"#contact"},{"text":"Blog","href":"blog"}],"social":[{"text":"Github","href":"https://github.com/Oiranca","icon":"icon-social-github"},{"text":"Twitter","href":"https://twitter.com/Oiranca","icon":"icon-social-twitter"},{"text":"Linkedin","href":"https://www.linkedin.com/in/samuel-romero-arbelo/","icon":"icon-social-linkedin"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Este camino llamado “código”","author":"Samuel Romero Arbelo","date":"2020-09-02T15:00:00.000Z","_content":"![](https://i.imgur.com/8XGzRVA.jpg)\n\n\nEste primer post voy intertar describir, porque me he decido andar entre *varibles, clases, funciones,...*.\n\nTodo comienza cuando decidí realizar un ciclo superior antes de enfrentarme a la universidad. Ese ciclo superior que decidí realizar, realmente no estaba orientado a la informática, pero si tenía una asignatura de **\"programación\"** donde por primera vez en mi vida, piqué algo de *código*. El lenguaje que nos enseñeron no fue otra que **C++**, y a pesar de que lo que lo que vimos fue muy básico, la verdad me lo pasé *genial*.\n\nDesgraciadamente el camino laboral no llevó donde estaba el *código* ni nada parecido, ya que fue por la vía comercial. Pero la espinita o mejor dicho, esos **unos y ceros** no desaparecían de mi interior, yo sabía que tenía que dedicarme a la **programación**.\n\nEsa sensación al crear algo o cuando tienes esa idea y quere darle vida, pelearse con un *bug*, eso hace que tu cabeza esté activa si a eso le sumas que trabajar con compañeros los cuales te aportan conocimiento haciendo que crezcas profesionalmente y poder devolverles el favor con tus propios conocimientos, es cómo el *ciclo de la vida*, siempre en bucle para alimentarse uno de las buenas praxis de otro.\n\nPor todo esto y más, hace ya **tres años**, tomé la desición de estudiar el ciclo superior de ***Desarrollo de Aplicaciones Multiplataformas***, fue una de las mejores decisiones de mi vida, aquí por fin, volví a picar *código*, vimos **Java**, nos divertimos con **Android** y por supuesto vimos bases de datos **SQL**,.... Lo terminé y no sólo me llevo el conocimiento, también buenos amigos y futuros compañeros de profesión.\n\nPor otro lado, en este 2020 nos hemos tenido que enfrentar a un enemigo invisible al ojo humano.\n\nMirando el lado positívo del confinamiento, es que he podido realizar varios cursos de **Angular, JavaScript, Node.js,...**. Los cuales me han ayudado a conocer parte de las tecnologías con las que se trabaja en **frontend**.\n\nEl confinamiento se me ha hecho más ameno escuchando **[los podcast de Carlos Ble](https://podcast.carlosble.com/)**, teniendo la suerte de haberlo podido conocer y brindandome la oportunidad de entrar como **aprendiz en la comunidad** **[LeanMind](https://leanmind.es/es/)**, de la cual habla en un gran artículo el compañero **[Airan en su blog](https://airanschez.wordpress.com/2020/07/06/%f0%9f%9a%80bienvenido-a-la-comunidad-de-lean-mind-%f0%9f%9a%80/)**.\n\nAgradezco la gran oportunidad de poder estar dentro de una comunidad, donde te tratan como un igual, te enseñan tantas cosas como **Pair Programming, testing con TDD**, se implican en tu **desarrollo** como por ejemplo ayudandote con los **Code Review**, realizamos **Coding Dojo**, de verdad que es una comunidad que se implica al 100% y te animan a que tu también te impliques.","source":"_posts/Este-camino-llamado-“codigo”.md","raw":"title: Este camino llamado “código”\nauthor: Samuel Romero Arbelo\ntags: []\ncategories: []\ndate: 2020-09-02 16:00:00\n---\n![](https://i.imgur.com/8XGzRVA.jpg)\n\n\nEste primer post voy intertar describir, porque me he decido andar entre *varibles, clases, funciones,...*.\n\nTodo comienza cuando decidí realizar un ciclo superior antes de enfrentarme a la universidad. Ese ciclo superior que decidí realizar, realmente no estaba orientado a la informática, pero si tenía una asignatura de **\"programación\"** donde por primera vez en mi vida, piqué algo de *código*. El lenguaje que nos enseñeron no fue otra que **C++**, y a pesar de que lo que lo que vimos fue muy básico, la verdad me lo pasé *genial*.\n\nDesgraciadamente el camino laboral no llevó donde estaba el *código* ni nada parecido, ya que fue por la vía comercial. Pero la espinita o mejor dicho, esos **unos y ceros** no desaparecían de mi interior, yo sabía que tenía que dedicarme a la **programación**.\n\nEsa sensación al crear algo o cuando tienes esa idea y quere darle vida, pelearse con un *bug*, eso hace que tu cabeza esté activa si a eso le sumas que trabajar con compañeros los cuales te aportan conocimiento haciendo que crezcas profesionalmente y poder devolverles el favor con tus propios conocimientos, es cómo el *ciclo de la vida*, siempre en bucle para alimentarse uno de las buenas praxis de otro.\n\nPor todo esto y más, hace ya **tres años**, tomé la desición de estudiar el ciclo superior de ***Desarrollo de Aplicaciones Multiplataformas***, fue una de las mejores decisiones de mi vida, aquí por fin, volví a picar *código*, vimos **Java**, nos divertimos con **Android** y por supuesto vimos bases de datos **SQL**,.... Lo terminé y no sólo me llevo el conocimiento, también buenos amigos y futuros compañeros de profesión.\n\nPor otro lado, en este 2020 nos hemos tenido que enfrentar a un enemigo invisible al ojo humano.\n\nMirando el lado positívo del confinamiento, es que he podido realizar varios cursos de **Angular, JavaScript, Node.js,...**. Los cuales me han ayudado a conocer parte de las tecnologías con las que se trabaja en **frontend**.\n\nEl confinamiento se me ha hecho más ameno escuchando **[los podcast de Carlos Ble](https://podcast.carlosble.com/)**, teniendo la suerte de haberlo podido conocer y brindandome la oportunidad de entrar como **aprendiz en la comunidad** **[LeanMind](https://leanmind.es/es/)**, de la cual habla en un gran artículo el compañero **[Airan en su blog](https://airanschez.wordpress.com/2020/07/06/%f0%9f%9a%80bienvenido-a-la-comunidad-de-lean-mind-%f0%9f%9a%80/)**.\n\nAgradezco la gran oportunidad de poder estar dentro de una comunidad, donde te tratan como un igual, te enseñan tantas cosas como **Pair Programming, testing con TDD**, se implican en tu **desarrollo** como por ejemplo ayudandote con los **Code Review**, realizamos **Coding Dojo**, de verdad que es una comunidad que se implica al 100% y te animan a que tu también te impliques.","slug":"Este-camino-llamado-“codigo”","published":1,"updated":"2020-09-05T12:30:34.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckerc3b1b000178hdbu3o6wrd","content":"<p><img src=\"https://i.imgur.com/8XGzRVA.jpg\" alt=\"\"></p>\n<p>Este primer post voy intertar describir, porque me he decido andar entre <em>varibles, clases, funciones,…</em>.</p>\n<p>Todo comienza cuando decidí realizar un ciclo superior antes de enfrentarme a la universidad. Ese ciclo superior que decidí realizar, realmente no estaba orientado a la informática, pero si tenía una asignatura de <strong>“programación”</strong> donde por primera vez en mi vida, piqué algo de <em>código</em>. El lenguaje que nos enseñeron no fue otra que <strong>C++</strong>, y a pesar de que lo que lo que vimos fue muy básico, la verdad me lo pasé <em>genial</em>.</p>\n<p>Desgraciadamente el camino laboral no llevó donde estaba el <em>código</em> ni nada parecido, ya que fue por la vía comercial. Pero la espinita o mejor dicho, esos <strong>unos y ceros</strong> no desaparecían de mi interior, yo sabía que tenía que dedicarme a la <strong>programación</strong>.</p>\n<p>Esa sensación al crear algo o cuando tienes esa idea y quere darle vida, pelearse con un <em>bug</em>, eso hace que tu cabeza esté activa si a eso le sumas que trabajar con compañeros los cuales te aportan conocimiento haciendo que crezcas profesionalmente y poder devolverles el favor con tus propios conocimientos, es cómo el <em>ciclo de la vida</em>, siempre en bucle para alimentarse uno de las buenas praxis de otro.</p>\n<p>Por todo esto y más, hace ya <strong>tres años</strong>, tomé la desición de estudiar el ciclo superior de <strong><em>Desarrollo de Aplicaciones Multiplataformas</em></strong>, fue una de las mejores decisiones de mi vida, aquí por fin, volví a picar <em>código</em>, vimos <strong>Java</strong>, nos divertimos con <strong>Android</strong> y por supuesto vimos bases de datos <strong>SQL</strong>,…. Lo terminé y no sólo me llevo el conocimiento, también buenos amigos y futuros compañeros de profesión.</p>\n<p>Por otro lado, en este 2020 nos hemos tenido que enfrentar a un enemigo invisible al ojo humano.</p>\n<p>Mirando el lado positívo del confinamiento, es que he podido realizar varios cursos de <strong>Angular, JavaScript, Node.js,…</strong>. Los cuales me han ayudado a conocer parte de las tecnologías con las que se trabaja en <strong>frontend</strong>.</p>\n<p>El confinamiento se me ha hecho más ameno escuchando <strong><a href=\"https://podcast.carlosble.com/\" target=\"_blank\" rel=\"noopener\">los podcast de Carlos Ble</a></strong>, teniendo la suerte de haberlo podido conocer y brindandome la oportunidad de entrar como <strong>aprendiz en la comunidad</strong> <strong><a href=\"https://leanmind.es/es/\" target=\"_blank\" rel=\"noopener\">LeanMind</a></strong>, de la cual habla en un gran artículo el compañero <strong><a href=\"https://airanschez.wordpress.com/2020/07/06/%f0%9f%9a%80bienvenido-a-la-comunidad-de-lean-mind-%f0%9f%9a%80/\" target=\"_blank\" rel=\"noopener\">Airan en su blog</a></strong>.</p>\n<p>Agradezco la gran oportunidad de poder estar dentro de una comunidad, donde te tratan como un igual, te enseñan tantas cosas como <strong>Pair Programming, testing con TDD</strong>, se implican en tu <strong>desarrollo</strong> como por ejemplo ayudandote con los <strong>Code Review</strong>, realizamos <strong>Coding Dojo</strong>, de verdad que es una comunidad que se implica al 100% y te animan a que tu también te impliques.</p>\n","site":{"data":{"contact":{"title":"Contacto","subtitle":"Medios de contacto.","items":[{"title":"Email","content":"oiranca@gmail.com"},{"title":"Perfil Linkedin","content":"Samuel Romero Arbelo","href":"#"}]},"about":{"title":"Un poco de mí","subtitle":"Curioso por naturaleza.","image":"img/perfil/photo_me.jpg","description":"<p>Mi nombre es <strong>Samuel Romero Arbelo</strong> soy de un pequeño pueblo llamado Ingenio, en la provincia de Las Palmas.</p>\n<p> Soy una persona <strong>curiosa</strong>, que le gusta estar siempre <strong>investigando</strong>, <strong>autodidacta</strong> ..., pero tengo que admitir que donde esté un buen equipo en el que todos aprendamos, me siento muy cómodo</p>\n<p>Empecé en este mundillo cuando tenía unos 21 años, en un Ciclo de Grado Superior de Telecomunicaciones en Informática, donde ví <strong>C++</strong>, pero por capricho de la vida, mi camino no fue el de la programación, aunque siempre se quedó dentro de mí el no poder dedicarme a ello.\n<p> Actualmente, he terminado el Ciclo Superior de Desarrollo de <strong>Aplicaciones Multiplataformas</strong> y por mi parte he realizado varios cursos de <strong>JavaScript</strong>, <strong>Angular</strong>, <strong>HTML5</strong>, <strong>CSS3</strong> y hoy en día sigo formándome <i><strong>(eso nunca va a parar)</strong></i>, en un bootcamp de <strong>Frontend</strong>, donde estoy reforzando conocimientos, pero también aprendiendo tenologías nuevas como <strong> React </strong>y seguiré con otro de Backend y para finalizar esta formación, uno de Agile.</p>","skills":[{"name":"Java","percentage":60},{"name":"HTML5","percentage":70},{"name":"CSS3","percentage":52},{"name":"Angular","percentage":40},{"name":"JavaScript / TypeScript","percentage":60}]},"footer":{"line_01":"&copy 2020 Samuel Romero Arbelo"},"experience":{"title":"Experiencia","subtitle":"La propia vida.","items":[{"title":"En construcción","content":"Esperando mi primera oportunidad","icon":"icon-info","featured":false}]},"hero":{"title":"Samuel Romero Arbelo","proposal_value":"Junior Developer","image":"img/japon/templo_izquierda.jpg"},"logo":{"image":"","image_dark":"","text":"","text_dark":""},"portfolio":{"title":"Proyectos","subtitle":"Siempre aprendiendo.","items":[{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/homeWork/Logo_HomeworK.png","hide_text":"Hide","title":"HomeWork (Android / Web)","subtitle":"Proyecto en Android y su versión Web","description":"<h2><b>HomeWork en Android</b> </h2> <p>En la versión de <b>android</b> he usado como tecnología <b>Java 8</b>, los datos de lo usuarios y todo lo necesario para el funcionamiento de la aplicación están alojados<b> en Firebase</b>. <h2><b>HomeWork Web</b> </h2> <p>En la versión <b>Web</b> he realizado la parte del frontend con <b>Angular 8</b> mientras que el backend ha sido desarrollado con <b>Node.js y Express</b>, montando una base de datos en <b>Mongodb</b>.</p>\n<h4><b><i>La versión web sigue en desarrollo.</i></b></h4>","tags":[{"text":"Versión Android","href":"https://github.com/Oiranca/pgl-project"},{"text":"Versión Web (Frontend) ","href":"https://github.com/Oiranca/frontend-homework"},{"text":"Versión Web (Backend)","href":"https://github.com/Oiranca/backend-homework"}],"parameters":[{"title":"Versión en Android","text":"Java / Firebase"},{"title":"Versión Web","text":"Angular 8 / Node.js / Express / Mongodb"}]}]},"menu":[{"text":"Incio","href":"#body"},{"text":"Un poco de mí","href":"#about"},{"text":"Experiencia","href":"#experience"},{"text":"Proyectos","href":"#work"},{"text":"Contacto","href":"#contact"},{"text":"Blog","href":"blog"}],"social":[{"text":"Github","href":"https://github.com/Oiranca","icon":"icon-social-github"},{"text":"Twitter","href":"https://twitter.com/Oiranca","icon":"icon-social-twitter"},{"text":"Linkedin","href":"https://www.linkedin.com/in/samuel-romero-arbelo/","icon":"icon-social-linkedin"}]}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/8XGzRVA.jpg\" alt=\"\"></p>\n<p>Este primer post voy intertar describir, porque me he decido andar entre <em>varibles, clases, funciones,…</em>.</p>\n<p>Todo comienza cuando decidí realizar un ciclo superior antes de enfrentarme a la universidad. Ese ciclo superior que decidí realizar, realmente no estaba orientado a la informática, pero si tenía una asignatura de <strong>“programación”</strong> donde por primera vez en mi vida, piqué algo de <em>código</em>. El lenguaje que nos enseñeron no fue otra que <strong>C++</strong>, y a pesar de que lo que lo que vimos fue muy básico, la verdad me lo pasé <em>genial</em>.</p>\n<p>Desgraciadamente el camino laboral no llevó donde estaba el <em>código</em> ni nada parecido, ya que fue por la vía comercial. Pero la espinita o mejor dicho, esos <strong>unos y ceros</strong> no desaparecían de mi interior, yo sabía que tenía que dedicarme a la <strong>programación</strong>.</p>\n<p>Esa sensación al crear algo o cuando tienes esa idea y quere darle vida, pelearse con un <em>bug</em>, eso hace que tu cabeza esté activa si a eso le sumas que trabajar con compañeros los cuales te aportan conocimiento haciendo que crezcas profesionalmente y poder devolverles el favor con tus propios conocimientos, es cómo el <em>ciclo de la vida</em>, siempre en bucle para alimentarse uno de las buenas praxis de otro.</p>\n<p>Por todo esto y más, hace ya <strong>tres años</strong>, tomé la desición de estudiar el ciclo superior de <strong><em>Desarrollo de Aplicaciones Multiplataformas</em></strong>, fue una de las mejores decisiones de mi vida, aquí por fin, volví a picar <em>código</em>, vimos <strong>Java</strong>, nos divertimos con <strong>Android</strong> y por supuesto vimos bases de datos <strong>SQL</strong>,…. Lo terminé y no sólo me llevo el conocimiento, también buenos amigos y futuros compañeros de profesión.</p>\n<p>Por otro lado, en este 2020 nos hemos tenido que enfrentar a un enemigo invisible al ojo humano.</p>\n<p>Mirando el lado positívo del confinamiento, es que he podido realizar varios cursos de <strong>Angular, JavaScript, Node.js,…</strong>. Los cuales me han ayudado a conocer parte de las tecnologías con las que se trabaja en <strong>frontend</strong>.</p>\n<p>El confinamiento se me ha hecho más ameno escuchando <strong><a href=\"https://podcast.carlosble.com/\" target=\"_blank\" rel=\"noopener\">los podcast de Carlos Ble</a></strong>, teniendo la suerte de haberlo podido conocer y brindandome la oportunidad de entrar como <strong>aprendiz en la comunidad</strong> <strong><a href=\"https://leanmind.es/es/\" target=\"_blank\" rel=\"noopener\">LeanMind</a></strong>, de la cual habla en un gran artículo el compañero <strong><a href=\"https://airanschez.wordpress.com/2020/07/06/%f0%9f%9a%80bienvenido-a-la-comunidad-de-lean-mind-%f0%9f%9a%80/\" target=\"_blank\" rel=\"noopener\">Airan en su blog</a></strong>.</p>\n<p>Agradezco la gran oportunidad de poder estar dentro de una comunidad, donde te tratan como un igual, te enseñan tantas cosas como <strong>Pair Programming, testing con TDD</strong>, se implican en tu <strong>desarrollo</strong> como por ejemplo ayudandote con los <strong>Code Review</strong>, realizamos <strong>Coding Dojo</strong>, de verdad que es una comunidad que se implica al 100% y te animan a que tu también te impliques.</p>\n"},{"title":"Un novato junto a \"React Testing\" primera parte...","author":"Samuel Romero Arbelo","date":"2020-11-28T13:14:00.000Z","_content":"![](https://i.imgur.com/StMOQvK.png)\n\nEsta semana, me he unido al equipo de **frontend** en un proyecto **open source** para la plataforma [***Huella positiva***](https://huellapositiva.com/), en dicho proyecto contribuyo con mis conocimientos en React, ya que hace poco terminé un bootcamp orientado a desarrollo web.\n\nLa verdad, que el entrar a formar parte de este equipo de desarrollo, ha sido una experiencia bastante buena, donde la sensación de aprender cada día, es de lo mejor, y además en un ambiente agradable donde todos te animan a seguir mejorando.\n\nPara poder ayudar en la parte de *testing*, he tenido que ir aprendiendo poco a poco [***React-Testing***](https://testing-library.com/docs/react-testing-library/intro), ya que es una de las librerías que usan para comprobar los componentes de React.\n\n\n#### ¿De dónde viene React Testing?\n\nEs una librería construida sobre **DOM Testing Library** la cual nos proporciona una manera fácil de probar nodos del DOM. \n\nEl uso de dicha librería se puede llevar a diferentes **Frameworks**:\n\n* [**Angular**](https://testing-library.com/docs/angular-testing-library/intro/)\n* [**React**](https://testing-library.com/docs/react-testing-library/intro/)\n* [**Vue**](https://testing-library.com/docs/vue-testing-library/intro/)\n\nTambién existe un **plugin** para usar esta librería para test **end-to-end**, en [**Cypress**](https://testing-library.com/docs/cypress-testing-library/intro/) y una implementeción para [**React Native**](https://testing-library.com/docs/react-native-testing-library/intro/).\n\nUna de sus grandes ventajas es que funciona con cualquier entorno que proporcione **DOM API**, como por ejemplo [**JEST**](https://jestjs.io/), [**Mocha**](https://mochajs.org/), [**JSDOM**](https://github.com/jsdom/jsdom) **o un explorador real**.\n\n#### React Testing\n\nComo comenté al principio del artículo, en este proyecto usarémos ***React-Testing***, ya que nos proporciona una gran herramienta para comprobar los componentes del proyectos que nos pida usar [**React**](https://react-bootstrap.github.io/), como es el caso del que tenemos entre manos. Además de ser una solución ligera para probar los componentes, proporciona funciones sencillas, además de **react-dom y react-dom/test-utils**, con la que fomentar mejores prácticas de pruebas.\n\nInteractúa directamente con los **nodos del DOM**, de una manera muy similar a un usuario buscando elementos en nuestra web, con diferentes consultas :\n\n* **ByLabelText**\n   \n* **ByPlaceholderText**\n\n* **ByText**\n     \n* **ByAltText**\n \n* **ByTitle**\n \n* **ByDisplayValue**\n\n* **ByRole**\n \n* **ByTestId**\n\n#### ¿Cómo podemos instalarla?\n\nSi creamos la aplicación con el comando ***`npx create-react-app 'nombre de la aplicación'`*** ya viene instalado y no sería necesario usar los comandos que describo más abajo.\n\n `npm install --save-dev @testing-library/react`\n\nnpm install --save-dev @testing-library/react\n\n**- Si usas 'yarn'**\n\n`yarn add --dev @testing-library/react`\n\n\n#### Primera prueba\n\n\nEn este primer ejemplo vamos a comprobar que se mostraría un texto al darle check a un **checkbox**.\n\n##### - Componente de React\n```\nimport React, {useState} from 'react';\n\nconst CheckButton = ({children}) => {\n    const [showMessage, setShowMessage]= useState(false);\n\n\n    return (\n        <div>\n            <label htmlFor=\"check\"> Enseñar mensaje</label>\n            <input type=\"checkbox\" name=\"check-prueba\" id=\"check\" onChange={e => setShowMessage(e.target.checked)}\n                   checked={showMessage}/>\n            {showMessage ? children : null}\n        </div>\n    );\n\n\n};\n\n\nexport default CheckButton;\n```\n\n##### - Prueba\n\nEn el test buscamos el elmento que está relacionado con el texto de la *etiqueta label*, en este caso sería el *input*, comentar que en la importación de **@testing-library/react** he usado el seudónimo **Testing** como apunte personal para ver los métodos de dicha librería, los cuales veremos más a fondo más adelante en un futuro **post**.\n\n```\nimport '@testing-library/jest-dom';\nimport React from 'react';\nimport * as Testing from '@testing-library/react';\nimport CheckButton from \"./CheckButton\";\n\n\ntest('Muestra los hijos al pulsar el check', () => {\n\n\n    const testMessage = 'Esto es un test';\n\n    Testing.render(<CheckButton>{testMessage}</CheckButton>)\n\n    expect(Testing.screen.queryByText(testMessage)).toBeNull();\n\n    Testing.fireEvent.click(Testing.screen.getByLabelText(/enseñar/i));\n\n    expect(Testing.screen.getByText(testMessage)).toBeInTheDocument();\n\n})\n```\n\n -  **Puedes encontrar más ejemplos en el github de** [**React Testing**](https://github.com/testing-library/react-testing-library#basic-example).\n\nPara terminar la primera parte de esta pequeña investigación de la librería ***React-Testing***, me gustaría comentar que me ha sorprendido bastante lo que nos facilita el poder probar los componentes y la manera sencilla de usar sus métodos, de los cuales hablaré en un segundo post.","source":"_posts/React-Testing.md","raw":"title: Un novato junto a \"React Testing\" primera parte...\nauthor: Samuel Romero Arbelo\ntags: []\ncategories: []\ndate: 2020-11-28 13:14:00\n---\n![](https://i.imgur.com/StMOQvK.png)\n\nEsta semana, me he unido al equipo de **frontend** en un proyecto **open source** para la plataforma [***Huella positiva***](https://huellapositiva.com/), en dicho proyecto contribuyo con mis conocimientos en React, ya que hace poco terminé un bootcamp orientado a desarrollo web.\n\nLa verdad, que el entrar a formar parte de este equipo de desarrollo, ha sido una experiencia bastante buena, donde la sensación de aprender cada día, es de lo mejor, y además en un ambiente agradable donde todos te animan a seguir mejorando.\n\nPara poder ayudar en la parte de *testing*, he tenido que ir aprendiendo poco a poco [***React-Testing***](https://testing-library.com/docs/react-testing-library/intro), ya que es una de las librerías que usan para comprobar los componentes de React.\n\n\n#### ¿De dónde viene React Testing?\n\nEs una librería construida sobre **DOM Testing Library** la cual nos proporciona una manera fácil de probar nodos del DOM. \n\nEl uso de dicha librería se puede llevar a diferentes **Frameworks**:\n\n* [**Angular**](https://testing-library.com/docs/angular-testing-library/intro/)\n* [**React**](https://testing-library.com/docs/react-testing-library/intro/)\n* [**Vue**](https://testing-library.com/docs/vue-testing-library/intro/)\n\nTambién existe un **plugin** para usar esta librería para test **end-to-end**, en [**Cypress**](https://testing-library.com/docs/cypress-testing-library/intro/) y una implementeción para [**React Native**](https://testing-library.com/docs/react-native-testing-library/intro/).\n\nUna de sus grandes ventajas es que funciona con cualquier entorno que proporcione **DOM API**, como por ejemplo [**JEST**](https://jestjs.io/), [**Mocha**](https://mochajs.org/), [**JSDOM**](https://github.com/jsdom/jsdom) **o un explorador real**.\n\n#### React Testing\n\nComo comenté al principio del artículo, en este proyecto usarémos ***React-Testing***, ya que nos proporciona una gran herramienta para comprobar los componentes del proyectos que nos pida usar [**React**](https://react-bootstrap.github.io/), como es el caso del que tenemos entre manos. Además de ser una solución ligera para probar los componentes, proporciona funciones sencillas, además de **react-dom y react-dom/test-utils**, con la que fomentar mejores prácticas de pruebas.\n\nInteractúa directamente con los **nodos del DOM**, de una manera muy similar a un usuario buscando elementos en nuestra web, con diferentes consultas :\n\n* **ByLabelText**\n   \n* **ByPlaceholderText**\n\n* **ByText**\n     \n* **ByAltText**\n \n* **ByTitle**\n \n* **ByDisplayValue**\n\n* **ByRole**\n \n* **ByTestId**\n\n#### ¿Cómo podemos instalarla?\n\nSi creamos la aplicación con el comando ***`npx create-react-app 'nombre de la aplicación'`*** ya viene instalado y no sería necesario usar los comandos que describo más abajo.\n\n `npm install --save-dev @testing-library/react`\n\nnpm install --save-dev @testing-library/react\n\n**- Si usas 'yarn'**\n\n`yarn add --dev @testing-library/react`\n\n\n#### Primera prueba\n\n\nEn este primer ejemplo vamos a comprobar que se mostraría un texto al darle check a un **checkbox**.\n\n##### - Componente de React\n```\nimport React, {useState} from 'react';\n\nconst CheckButton = ({children}) => {\n    const [showMessage, setShowMessage]= useState(false);\n\n\n    return (\n        <div>\n            <label htmlFor=\"check\"> Enseñar mensaje</label>\n            <input type=\"checkbox\" name=\"check-prueba\" id=\"check\" onChange={e => setShowMessage(e.target.checked)}\n                   checked={showMessage}/>\n            {showMessage ? children : null}\n        </div>\n    );\n\n\n};\n\n\nexport default CheckButton;\n```\n\n##### - Prueba\n\nEn el test buscamos el elmento que está relacionado con el texto de la *etiqueta label*, en este caso sería el *input*, comentar que en la importación de **@testing-library/react** he usado el seudónimo **Testing** como apunte personal para ver los métodos de dicha librería, los cuales veremos más a fondo más adelante en un futuro **post**.\n\n```\nimport '@testing-library/jest-dom';\nimport React from 'react';\nimport * as Testing from '@testing-library/react';\nimport CheckButton from \"./CheckButton\";\n\n\ntest('Muestra los hijos al pulsar el check', () => {\n\n\n    const testMessage = 'Esto es un test';\n\n    Testing.render(<CheckButton>{testMessage}</CheckButton>)\n\n    expect(Testing.screen.queryByText(testMessage)).toBeNull();\n\n    Testing.fireEvent.click(Testing.screen.getByLabelText(/enseñar/i));\n\n    expect(Testing.screen.getByText(testMessage)).toBeInTheDocument();\n\n})\n```\n\n -  **Puedes encontrar más ejemplos en el github de** [**React Testing**](https://github.com/testing-library/react-testing-library#basic-example).\n\nPara terminar la primera parte de esta pequeña investigación de la librería ***React-Testing***, me gustaría comentar que me ha sorprendido bastante lo que nos facilita el poder probar los componentes y la manera sencilla de usar sus métodos, de los cuales hablaré en un segundo post.","slug":"React-Testing","published":1,"updated":"2021-01-15T07:46:52.936Z","_id":"ckhrpr67400002dhd0x5veuwh","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://i.imgur.com/StMOQvK.png\" alt=\"\"></p>\n<p>Esta semana, me he unido al equipo de <strong>frontend</strong> en un proyecto <strong>open source</strong> para la plataforma <a href=\"https://huellapositiva.com/\" target=\"_blank\" rel=\"noopener\"><strong><em>Huella positiva</em></strong></a>, en dicho proyecto contribuyo con mis conocimientos en React, ya que hace poco terminé un bootcamp orientado a desarrollo web.</p>\n<p>La verdad, que el entrar a formar parte de este equipo de desarrollo, ha sido una experiencia bastante buena, donde la sensación de aprender cada día, es de lo mejor, y además en un ambiente agradable donde todos te animan a seguir mejorando.</p>\n<p>Para poder ayudar en la parte de <em>testing</em>, he tenido que ir aprendiendo poco a poco <a href=\"https://testing-library.com/docs/react-testing-library/intro\" target=\"_blank\" rel=\"noopener\"><strong><em>React-Testing</em></strong></a>, ya que es una de las librerías que usan para comprobar los componentes de React.</p>\n<h4 id=\"¿De-donde-viene-React-Testing\"><a href=\"#¿De-donde-viene-React-Testing\" class=\"headerlink\" title=\"¿De dónde viene React Testing?\"></a>¿De dónde viene React Testing?</h4><p>Es una librería construida sobre <strong>DOM Testing Library</strong> la cual nos proporciona una manera fácil de probar nodos del DOM. </p>\n<p>El uso de dicha librería se puede llevar a diferentes <strong>Frameworks</strong>:</p>\n<ul>\n<li><a href=\"https://testing-library.com/docs/angular-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>Angular</strong></a></li>\n<li><a href=\"https://testing-library.com/docs/react-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>React</strong></a></li>\n<li><a href=\"https://testing-library.com/docs/vue-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>Vue</strong></a></li>\n</ul>\n<p>También existe un <strong>plugin</strong> para usar esta librería para test <strong>end-to-end</strong>, en <a href=\"https://testing-library.com/docs/cypress-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>Cypress</strong></a> y una implementeción para <a href=\"https://testing-library.com/docs/react-native-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>React Native</strong></a>.</p>\n<p>Una de sus grandes ventajas es que funciona con cualquier entorno que proporcione <strong>DOM API</strong>, como por ejemplo <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\"><strong>JEST</strong></a>, <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\"><strong>Mocha</strong></a>, <a href=\"https://github.com/jsdom/jsdom\" target=\"_blank\" rel=\"noopener\"><strong>JSDOM</strong></a> <strong>o un explorador real</strong>.</p>\n<h4 id=\"React-Testing\"><a href=\"#React-Testing\" class=\"headerlink\" title=\"React Testing\"></a>React Testing</h4><p>Como comenté al principio del artículo, en este proyecto usarémos <strong><em>React-Testing</em></strong>, ya que nos proporciona una gran herramienta para comprobar los componentes del proyectos que nos pida usar <a href=\"https://react-bootstrap.github.io/\" target=\"_blank\" rel=\"noopener\"><strong>React</strong></a>, como es el caso del que tenemos entre manos. Además de ser una solución ligera para probar los componentes, proporciona funciones sencillas, además de <strong>react-dom y react-dom/test-utils</strong>, con la que fomentar mejores prácticas de pruebas.</p>\n<p>Interactúa directamente con los <strong>nodos del DOM</strong>, de una manera muy similar a un usuario buscando elementos en nuestra web, con diferentes consultas :</p>\n<ul>\n<li><p><strong>ByLabelText</strong></p>\n</li>\n<li><p><strong>ByPlaceholderText</strong></p>\n</li>\n<li><p><strong>ByText</strong></p>\n</li>\n<li><p><strong>ByAltText</strong></p>\n</li>\n<li><p><strong>ByTitle</strong></p>\n</li>\n<li><p><strong>ByDisplayValue</strong></p>\n</li>\n<li><p><strong>ByRole</strong></p>\n</li>\n<li><p><strong>ByTestId</strong></p>\n</li>\n</ul>\n<h4 id=\"¿Como-podemos-instalarla\"><a href=\"#¿Como-podemos-instalarla\" class=\"headerlink\" title=\"¿Cómo podemos instalarla?\"></a>¿Cómo podemos instalarla?</h4><p>Si creamos la aplicación con el comando <strong><em><code>npx create-react-app &#39;nombre de la aplicación&#39;</code></em></strong> ya viene instalado y no sería necesario usar los comandos que describo más abajo.</p>\n<p> <code>npm install --save-dev @testing-library/react</code></p>\n<p>npm install –save-dev @testing-library/react</p>\n<p><strong>- Si usas ‘yarn’</strong></p>\n<p><code>yarn add --dev @testing-library/react</code></p>\n<h4 id=\"Primera-prueba\"><a href=\"#Primera-prueba\" class=\"headerlink\" title=\"Primera prueba\"></a>Primera prueba</h4><p>En este primer ejemplo vamos a comprobar que se mostraría un texto al darle check a un <strong>checkbox</strong>.</p>\n<h5 id=\"Componente-de-React\"><a href=\"#Componente-de-React\" class=\"headerlink\" title=\"- Componente de React\"></a>- Componente de React</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;useState&#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const CheckButton &#x3D; (&#123;children&#125;) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const [showMessage, setShowMessage]&#x3D; useState(false);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label htmlFor&#x3D;&quot;check&quot;&gt; Enseñar mensaje&lt;&#x2F;label&gt;</span><br><span class=\"line\">            &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;check-prueba&quot; id&#x3D;&quot;check&quot; onChange&#x3D;&#123;e &#x3D;&gt; setShowMessage(e.target.checked)&#125;</span><br><span class=\"line\">                   checked&#x3D;&#123;showMessage&#125;&#x2F;&gt;</span><br><span class=\"line\">            &#123;showMessage ? children : null&#125;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">export default CheckButton;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Prueba\"><a href=\"#Prueba\" class=\"headerlink\" title=\"- Prueba\"></a>- Prueba</h5><p>En el test buscamos el elmento que está relacionado con el texto de la <em>etiqueta label</em>, en este caso sería el <em>input</em>, comentar que en la importación de <strong>@testing-library/react</strong> he usado el seudónimo <strong>Testing</strong> como apunte personal para ver los métodos de dicha librería, los cuales veremos más a fondo más adelante en un futuro <strong>post</strong>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;@testing-library&#x2F;jest-dom&#39;;</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import CheckButton from &quot;.&#x2F;CheckButton&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;Muestra los hijos al pulsar el check&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    const testMessage &#x3D; &#39;Esto es un test&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.render(&lt;CheckButton&gt;&#123;testMessage&#125;&lt;&#x2F;CheckButton&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(Testing.screen.queryByText(testMessage)).toBeNull();</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.fireEvent.click(Testing.screen.getByLabelText(&#x2F;enseñar&#x2F;i));</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(Testing.screen.getByText(testMessage)).toBeInTheDocument();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Puedes encontrar más ejemplos en el github de</strong> <a href=\"https://github.com/testing-library/react-testing-library#basic-example\" target=\"_blank\" rel=\"noopener\"><strong>React Testing</strong></a>.</li>\n</ul>\n<p>Para terminar la primera parte de esta pequeña investigación de la librería <strong><em>React-Testing</em></strong>, me gustaría comentar que me ha sorprendido bastante lo que nos facilita el poder probar los componentes y la manera sencilla de usar sus métodos, de los cuales hablaré en un segundo post.</p>\n","site":{"data":{"contact":{"title":"Contacto","subtitle":"Medios de contacto.","items":[{"title":"Email","content":"oiranca@gmail.com"},{"title":"Perfil Linkedin","content":"Samuel Romero Arbelo","href":"#"}]},"about":{"title":"Un poco de mí","subtitle":"Curioso por naturaleza.","image":"img/perfil/photo_me.jpg","description":"<p>Mi nombre es <strong>Samuel Romero Arbelo</strong> soy de un pequeño pueblo llamado Ingenio, en la provincia de Las Palmas.</p>\n<p> Soy una persona <strong>curiosa</strong>, que le gusta estar siempre <strong>investigando</strong>, <strong>autodidacta</strong> ..., pero tengo que admitir que donde esté un buen equipo en el que todos aprendamos, me siento muy cómodo</p>\n<p>Empecé en este mundillo cuando tenía unos 21 años, en un Ciclo de Grado Superior de Telecomunicaciones en Informática, donde ví <strong>C++</strong>, pero por capricho de la vida, mi camino no fue el de la programación, aunque siempre se quedó dentro de mí el no poder dedicarme a ello.\n<p> Actualmente, he terminado el Ciclo Superior de Desarrollo de <strong>Aplicaciones Multiplataformas</strong> y por mi parte he realizado varios cursos de <strong>JavaScript</strong>, <strong>Angular</strong>, <strong>HTML5</strong>, <strong>CSS3</strong> y hoy en día sigo formándome <i><strong>(eso nunca va a parar)</strong></i>, en un bootcamp de <strong>Frontend</strong>, donde estoy reforzando conocimientos, pero también aprendiendo tenologías nuevas como <strong> React </strong>y seguiré con otro de Backend y para finalizar esta formación, uno de Agile.</p>","skills":[{"name":"JavaScript / TypeScript","percentage":60},{"name":"React","percentage":40},{"name":"HTML5","percentage":70},{"name":"CSS3","percentage":52},{"name":"Angular","percentage":40},{"name":"Java","percentage":60}]},"footer":{"line_01":"&copy 2020 Samuel Romero Arbelo"},"experience":{"title":"Experiencia","subtitle":"La propia vida.","items":[{"title":"Prácticas de Empresa en Lean Mind","content":"Las prácticas las he desarrollado como colaborador, en un proyecto open source para la plataforma Huella Positiva, en la cual hemos desarrollado el frontend con React.","href":"https://leanmind.es/es/","icon":"icon-info","featured":false}]},"hero":{"title":"Samuel Romero Arbelo","proposal_value":"Junior Developer","image":"img/japon/templo_izquierda.jpg"},"logo":{"image":"","image_dark":"","text":"","text_dark":""},"portfolio":{"title":"Proyectos","subtitle":"Siempre aprendiendo.","items":[{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/homeWork/Logo_HomeworK.png","hide_text":"Hide","title":"HomeWork (Android / Web)","subtitle":"Proyecto en Android y su versión Web","description":"<h2><b>HomeWork en Android</b> </h2> <p>En la versión de <b>android</b> he usado como tecnología <b>Java 8</b>, los datos de lo usuarios y todo lo necesario para el funcionamiento de la aplicación están alojados<b> en Firebase</b>. <h2><b>HomeWork Web</b> </h2> <p>En la versión <b>Web</b> he realizado la parte del frontend con <b>Angular 8</b> mientras que el backend ha sido desarrollado con <b>Node.js y Express</b>, montando una base de datos en <b>Mongodb</b>.</p>\n<h4><b><i>La versión web sigue en desarrollo.</i></b></h4>","tags":[{"text":"Versión Android","href":"https://github.com/Oiranca/pgl-project"},{"text":"Versión Web (Frontend) ","href":"https://github.com/Oiranca/frontend-homework"},{"text":"Versión Web (Backend)","href":"https://github.com/Oiranca/backend-homework"}],"parameters":[{"title":"Versión en Android","text":"Java / Firebase"},{"title":"Versión Web","text":"Angular 8 / Node.js / Express / Mongodb"}]}]},"menu":[{"text":"Incio","href":"#body"},{"text":"Un poco de mí","href":"#about"},{"text":"Experiencia","href":"#experience"},{"text":"Proyectos","href":"#work"},{"text":"Contacto","href":"#contact"},{"text":"Blog","href":"blog"}],"social":[{"text":"Github","href":"https://github.com/Oiranca","icon":"icon-social-github"},{"text":"Twitter","href":"https://twitter.com/Oiranca","icon":"icon-social-twitter"},{"text":"Linkedin","href":"https://www.linkedin.com/in/samuel-romero-arbelo/","icon":"icon-social-linkedin"}]}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/StMOQvK.png\" alt=\"\"></p>\n<p>Esta semana, me he unido al equipo de <strong>frontend</strong> en un proyecto <strong>open source</strong> para la plataforma <a href=\"https://huellapositiva.com/\" target=\"_blank\" rel=\"noopener\"><strong><em>Huella positiva</em></strong></a>, en dicho proyecto contribuyo con mis conocimientos en React, ya que hace poco terminé un bootcamp orientado a desarrollo web.</p>\n<p>La verdad, que el entrar a formar parte de este equipo de desarrollo, ha sido una experiencia bastante buena, donde la sensación de aprender cada día, es de lo mejor, y además en un ambiente agradable donde todos te animan a seguir mejorando.</p>\n<p>Para poder ayudar en la parte de <em>testing</em>, he tenido que ir aprendiendo poco a poco <a href=\"https://testing-library.com/docs/react-testing-library/intro\" target=\"_blank\" rel=\"noopener\"><strong><em>React-Testing</em></strong></a>, ya que es una de las librerías que usan para comprobar los componentes de React.</p>\n<h4 id=\"¿De-donde-viene-React-Testing\"><a href=\"#¿De-donde-viene-React-Testing\" class=\"headerlink\" title=\"¿De dónde viene React Testing?\"></a>¿De dónde viene React Testing?</h4><p>Es una librería construida sobre <strong>DOM Testing Library</strong> la cual nos proporciona una manera fácil de probar nodos del DOM. </p>\n<p>El uso de dicha librería se puede llevar a diferentes <strong>Frameworks</strong>:</p>\n<ul>\n<li><a href=\"https://testing-library.com/docs/angular-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>Angular</strong></a></li>\n<li><a href=\"https://testing-library.com/docs/react-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>React</strong></a></li>\n<li><a href=\"https://testing-library.com/docs/vue-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>Vue</strong></a></li>\n</ul>\n<p>También existe un <strong>plugin</strong> para usar esta librería para test <strong>end-to-end</strong>, en <a href=\"https://testing-library.com/docs/cypress-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>Cypress</strong></a> y una implementeción para <a href=\"https://testing-library.com/docs/react-native-testing-library/intro/\" target=\"_blank\" rel=\"noopener\"><strong>React Native</strong></a>.</p>\n<p>Una de sus grandes ventajas es que funciona con cualquier entorno que proporcione <strong>DOM API</strong>, como por ejemplo <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener\"><strong>JEST</strong></a>, <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\"><strong>Mocha</strong></a>, <a href=\"https://github.com/jsdom/jsdom\" target=\"_blank\" rel=\"noopener\"><strong>JSDOM</strong></a> <strong>o un explorador real</strong>.</p>\n<h4 id=\"React-Testing\"><a href=\"#React-Testing\" class=\"headerlink\" title=\"React Testing\"></a>React Testing</h4><p>Como comenté al principio del artículo, en este proyecto usarémos <strong><em>React-Testing</em></strong>, ya que nos proporciona una gran herramienta para comprobar los componentes del proyectos que nos pida usar <a href=\"https://react-bootstrap.github.io/\" target=\"_blank\" rel=\"noopener\"><strong>React</strong></a>, como es el caso del que tenemos entre manos. Además de ser una solución ligera para probar los componentes, proporciona funciones sencillas, además de <strong>react-dom y react-dom/test-utils</strong>, con la que fomentar mejores prácticas de pruebas.</p>\n<p>Interactúa directamente con los <strong>nodos del DOM</strong>, de una manera muy similar a un usuario buscando elementos en nuestra web, con diferentes consultas :</p>\n<ul>\n<li><p><strong>ByLabelText</strong></p>\n</li>\n<li><p><strong>ByPlaceholderText</strong></p>\n</li>\n<li><p><strong>ByText</strong></p>\n</li>\n<li><p><strong>ByAltText</strong></p>\n</li>\n<li><p><strong>ByTitle</strong></p>\n</li>\n<li><p><strong>ByDisplayValue</strong></p>\n</li>\n<li><p><strong>ByRole</strong></p>\n</li>\n<li><p><strong>ByTestId</strong></p>\n</li>\n</ul>\n<h4 id=\"¿Como-podemos-instalarla\"><a href=\"#¿Como-podemos-instalarla\" class=\"headerlink\" title=\"¿Cómo podemos instalarla?\"></a>¿Cómo podemos instalarla?</h4><p>Si creamos la aplicación con el comando <strong><em><code>npx create-react-app &#39;nombre de la aplicación&#39;</code></em></strong> ya viene instalado y no sería necesario usar los comandos que describo más abajo.</p>\n<p> <code>npm install --save-dev @testing-library/react</code></p>\n<p>npm install –save-dev @testing-library/react</p>\n<p><strong>- Si usas ‘yarn’</strong></p>\n<p><code>yarn add --dev @testing-library/react</code></p>\n<h4 id=\"Primera-prueba\"><a href=\"#Primera-prueba\" class=\"headerlink\" title=\"Primera prueba\"></a>Primera prueba</h4><p>En este primer ejemplo vamos a comprobar que se mostraría un texto al darle check a un <strong>checkbox</strong>.</p>\n<h5 id=\"Componente-de-React\"><a href=\"#Componente-de-React\" class=\"headerlink\" title=\"- Componente de React\"></a>- Componente de React</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;useState&#125; from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const CheckButton &#x3D; (&#123;children&#125;) &#x3D;&gt; &#123;</span><br><span class=\"line\">    const [showMessage, setShowMessage]&#x3D; useState(false);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label htmlFor&#x3D;&quot;check&quot;&gt; Enseñar mensaje&lt;&#x2F;label&gt;</span><br><span class=\"line\">            &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;check-prueba&quot; id&#x3D;&quot;check&quot; onChange&#x3D;&#123;e &#x3D;&gt; setShowMessage(e.target.checked)&#125;</span><br><span class=\"line\">                   checked&#x3D;&#123;showMessage&#125;&#x2F;&gt;</span><br><span class=\"line\">            &#123;showMessage ? children : null&#125;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">export default CheckButton;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Prueba\"><a href=\"#Prueba\" class=\"headerlink\" title=\"- Prueba\"></a>- Prueba</h5><p>En el test buscamos el elmento que está relacionado con el texto de la <em>etiqueta label</em>, en este caso sería el <em>input</em>, comentar que en la importación de <strong>@testing-library/react</strong> he usado el seudónimo <strong>Testing</strong> como apunte personal para ver los métodos de dicha librería, los cuales veremos más a fondo más adelante en un futuro <strong>post</strong>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#39;@testing-library&#x2F;jest-dom&#39;;</span><br><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import CheckButton from &quot;.&#x2F;CheckButton&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;Muestra los hijos al pulsar el check&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    const testMessage &#x3D; &#39;Esto es un test&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.render(&lt;CheckButton&gt;&#123;testMessage&#125;&lt;&#x2F;CheckButton&gt;)</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(Testing.screen.queryByText(testMessage)).toBeNull();</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.fireEvent.click(Testing.screen.getByLabelText(&#x2F;enseñar&#x2F;i));</span><br><span class=\"line\"></span><br><span class=\"line\">    expect(Testing.screen.getByText(testMessage)).toBeInTheDocument();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Puedes encontrar más ejemplos en el github de</strong> <a href=\"https://github.com/testing-library/react-testing-library#basic-example\" target=\"_blank\" rel=\"noopener\"><strong>React Testing</strong></a>.</li>\n</ul>\n<p>Para terminar la primera parte de esta pequeña investigación de la librería <strong><em>React-Testing</em></strong>, me gustaría comentar que me ha sorprendido bastante lo que nos facilita el poder probar los componentes y la manera sencilla de usar sus métodos, de los cuales hablaré en un segundo post.</p>\n"},{"layout":"un novato junto a react","title":"Un novato junto a \"React Testing\" segunda parte...","date":"2021-01-15T07:49:00.000Z","_content":"![](https://i.imgur.com/StMOQvK.png)\n\n\n\nEste segundo post, es la continuación de un total de tres sobre mis experiencia durante el estudio de la libreía **React Testing**. En la [primera parte](https://www.samuelromeroarbelo.com/2020/11/28/React-Testing/) empecé con una pequeña descripción y sus ventajas, en esta segunda parte vamos a ver un poco más sobre ella ya que nos centraremos en las **queries** o **consultas**, las cuales nos van ayudar para la realización de los test.\n\n# Queries o Consultas\n\n* #### Variantes\n\n\t* **Variantes que devuelven el primer elemento**\n\t\n\t\t- **getBy :** Retorna el primer nodo que coincide para una consulta, la cual arroja un error si no encuentra un elemento coincidente o si se encuentra más de uno.\n\t\t\t\t\t\t\n\t\t- **querryBy :** Retorna el primer nodo que coincide con la consulta y nos devuelve un **null** si no encuentra coincidencias. Como nos comenta la documentacion, este tipo de consultas es muy útil si queremos verificar que un elemento está presente o no.\t\n\t\t\n\t\t- **findBy :** Retorna una promesa, la cual se resuelve cuando se encuentra un elemento coincidente con la consulta realizada, si no encuentro ninguna coincidencia o nos encuentra más de una después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.\n\t\t\n\t* **Variantes que devuelven un array de elementos**\n\t\n\t\t- **getAllBy :** Retorna un array con todos los nodos coincidentes, nos devolvería un error si no encuentra elementos para dicha consulta.\n\t\t\t\t\t\t\n\t\t- **querryAllBy :** Retorna un array con todos los nodos coincidentes para la consulta y una array vacío si no encuntra coincidencias.\t\n\t\t\n\t\t- **findAllBy :** Retorna una promesa, la cual se resuelve en un array cuando se encuentra los nodos coincidente con la consulta realizada, si no encuentro ninguna coincidencia después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.\n\n\n* #### Opciones \n\nLos argumentos de una consulta pueden ser *string, expresion regular o funciones*, además podemos encontrar opciones para ajustar como el nodo es analizado, la cuales son :\n\n*  *Precision:*\n\n\tAlgunas Apis acepta un objeto como final del argumento que se le pasa en la consulta y que puede afectar la precisión de la coincidencias de las *string* pasada:\n\t\n\t* **exact :** Por defecto viene en *true*, coincide con cadenas completas y distingue entre mayúsculas y minúsculas. Cuando es inicializado a *false* coincide con subcadenas y no distingue entre mayúsculas y minúsculas. \n\t\tEn la documentación aconsejan que usar *expresiones regulares* porque te dan más control sobre la coincidencia aproximada.\n\t\n\t* **normalizer :** Con esta opción lo que hacemos es anular el comportamiento de *Normalization*, la cual se ejecuta siempre antes de la lógica para la búsqueda. \n\n* *Normalización:*\n\n\tComo comentamos en una de la opciones de la precisión, esta se ejecuta antes de la lógica y por defecto quita los espacios en blanco antes y después del texto y regulariza los espacios entre palabras a uno sólo.\n\t\n\tSi queremo evitar esta normalización o poner opciones alternativas, les podemos pasar una **normalizer function**, la cual recibirá una *string* y espera una versión normalizada de dicha *string*.\n\t\n\tTenemos el método **getDefaultNormalizer**, el cual nos permite introducirlo en nuestra opciones y pasarle como parámetro:\n\t\n\t* **trim:** El cual nos quitará los espacios en blanco, tanto al principio como al final de la cadena, viene como predeterminado en *true*.\n\t\t* **collapseWhitespace:** Nos quitaría los espacios extras entre palabras dejándolo solamentes en uno, viene por defecto en *true*.\n\n\n* **Screen** \n\n\tTodas las consultas que exportamos mediante el *DOM Testing Library* aceptan un contenedor como primer argumento y es común consultar todo el *document.body*, por eso la librería *DOM Testing Library* también nos exporta un objeto **screen** el cual contiene todas las consultas que están vinculadas previamente usando la funcionalidad *within*, que podemos encontrar en el apartado [*Custom Queries*](https://testing-library.com/docs/dom-testing-library/api-helpers/#custom-queries).\n\n\n* **Screen.debug**\n\n\tMétodo que nos ayuda hacer *debug* del documento en un sólo elemento o en un array de elementos.\n\n\n* **Queries**\n\n\tEstas consultas, son consultas base y requieren de le pasemos un contenedor como primer argumento.\n\n<br/>\n\n **ByLabelText** \n\t\nNos buscará la etiqueta que coincida con el *TextMatch* que le pasemos y luego nos encontrará el elemento asociado con dicha etiqueta.\n\t\n\t\n   ```\n        getByLabelText(\n              container: HTMLElement, //if you're using `screen`, then skip this argument\n              text: TextMatch,\n              options?: {\n                selector?: string = '*',\n                exact?: boolean = true,\n                normalizer?: NormalizerFn,\n              }): HTMLElement\n   ```\n\n\n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n       \n   \n```\nimport * as React from \"react\";\nimport \"./Label.scss\";\nconst Label = () => {\n  return (\n    <>\n      <div className={\"classLabel\"}>\n        <label htmlFor=\"username-input\">\n          Testing getByLabelText and getByText\n        </label>\n        <input id=\"username-input\" />\n      </div>\n    </>\n  );\n};\n\nexport default Label;\n```\n\n<br/>\n\n **Test**\n\n  ```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport Label from \"./Label\";\n\ntest(\"for label queries\", () => {\n  Testing.render(<Label/>);\n  Testing.screen.getByLabelText(\"Testing getByLabelText and getByText\");\n});\n  ```\n\n<br/>\n\n**ByPlaceholderText**\n\t\nNos buscará en todos los elementos que contentagan *placeholder* hasta econtrar uno que coincida con el *TextMatch* que le pasemos.\n\t\n\t \n\n  ```\n      getByPlaceholderText(\n            container: HTMLElement, //if you're using `screen`, then skip this argument\n            text: TextMatch,\n            options?: {\n              exact?: boolean = true,\n              normalizer?: NormalizerFn,\n            }): HTMLElement\n  ```\n<br/>\n\n* **Ejemplo en código**\n       \n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./InputWithPlaceHolder.scss\";\n\nconst InputWithPlaceHolder = () => {\n  return (\n    <div className={\"input-place-holder\"}>\n      <h3>Testing getByPlaceholderText</h3>\n      <input type=\"text\" placeholder={\"I am a placeholder\"} />\n    </div>\n  );\n};\n\nexport default InputWithPlaceHolder;\n```\n<br/>\n\n**Test**\n    \n```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport InputWithPlaceHolder from \"./InputWithPlaceHolder\";\n\ntest(\"testing getBy Placeholder\", () => {\n  Testing.render(<InputWithPlaceHolder />);\n  Testing.screen.getByPlaceholderText(\"I am a placeholder\");\n});\n\n```\n\t\n~ **Buscar por placeholder no es la mejor opción, por lo general se usa getByLabelText** ~\n\n<br/>\n\n**ByText**\n\t\nNos buscará  en todos lo elementos que contengan texto en el nodo con *textContent* que coincida con el *TextMatch* que le pasemos. Además funciona con *inputs* cuyo atributos sean del tipo *submit o button*. \n\nPodemos pasarle como opción *ignore* en estado *false* si queremos evitar que nos devuelva como *true* una etiqueta script.\n\t\n```\n\t\tgetByText(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  text: TextMatch,\n\t\t  options?: {\n\t\t    selector?: string = '*',\n\t\t    exact?: boolean = true,\n\t\t    ignore?: string|boolean = 'script, style',\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n\n<br/>\n\n* **Ejemplo en código**\n\n\n\n**Componente**\n       \n\n```\n        import * as React from 'react';\n\n        const Label = () => {\n\n            return (<><label htmlFor=\"username-input\">Label</label>\n                <input id=\"username-input\"/>\n            </>);\n        };\n\n        export default Label;\n```\n<br/>\n\n**Test**\n    \n```\n    import * as React from 'react';\n    import * as Testing from '@testing-library/react';\n    import Label from \"./Label\";\n\n\n    test('queries getByText', () => {\n\n        Testing.render(<Label/>);\n        Testing.screen.getByText(/Label/i);\n\n    });\n```\n\n<br/>\n\n**ByAltText**\n\t\nEsta búsqueda es solamente soportada por elementos que contengan el atributo **alt**,como por ejemplo`<img>, <input> y <area>` ya que nos devolvería dichos elementos si su atributo *alt* coincide con el *TextMatch* indicado.\n\t\n\n```\n\t\tgetByAltText(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  text: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n       \n```\nimport * as React from \"react\";\nimport IconReactTesting from \"../../img/octopus-128x128.png\";\nimport \"./Img.scss\";\n\nconst Img = () => {\n  return (\n    <div className={\"img-class\"}>\n      <h3>Testing ByAltText</h3>\n      <img src={IconReactTesting} alt={\"This is a img\"} />\n    </div>\n  );\n};\n\nexport default Img;\n\n```\n<br/>\n\n**Test**\n\n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport Img from '../Img/Img';\n\ntest('queries getByAltText', () => {\n\n    Testing.render(<Img/>);\n    Testing.screen.getByAltText('This is a img');\n})\n```\n<br/>\n\n**ByTitle**\n\t\nEsta búsqueda nos devolvería el elemento que contenga en su atributo *title* el *TextMatch* que le pasemos, funcionaría con elementos *svg* ya que contengan dentro la etiqueta *title*. \n\t\n```\n\t\tgetByTitle(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  title: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n\n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n       \n```\nimport * as React from \"react\";\nimport \"./InputWithTitle.scss\";\n\nconst InputWithTitle = () => {\n  return (\n    <div className={\"input-with-title\"}>\n      <h3>Testing ByTitle</h3>\n      <input type={\"text\"} title={\"This a input with title\"} />\n    </div>\n  );\n};\n\nexport default InputWithTitle;\n\n\n```\n<br/>\n\n**Test**\n     \n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport InputWithTitle from \"./InputWithTitle\";\n\ntest('queries getByTitle', () => {\n    Testing.render(<InputWithTitle/>);\n    Testing.screen.getByTitle('This a input with title');\n})\n```\n<br/>\n\n**ByDisplayValue**\n\t\nEsta búsqueda nos devolvería el **input, textarea o select** que contengan el valor indicado en el *TextMatch*.\n\t\n\n```\n\t\tgetByDisplayValue(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  value: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n<br/>\n\n* **Ejemplo en código**\n\n\n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./InputWithDisplayValue.scss\";\n\nconst InputWithDisplayValue = () => {\n  return (\n    <div className={\"display-value\"}>\n      <h3>Testing ByDisplayValue</h3>\n      <input\n        type={\"text\"}\n        title={\"This a input with title\"}\n        value={\"This a input with display value\"}\n        readOnly={true}\n      />\n    </div>\n  );\n};\n\nexport default InputWithDisplayValue;\n\n\n```\n<br/>\n\n**Test**\n     \n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport InputWithDisplayValue from \"./InputWithDisplayValue\";\n\ntest('queries getByTitle', () => {\n    Testing.render(<InputWithDisplayValue/>);\n    Testing.screen.getByDisplayValue('This a input with display value');\n});\n```\n<br/>\t\n\n**ByRole**\n \t\n Búsqueda por el atributo *role* incluyendo también en los elementos que ya tienen dicha etiqueta implícita [(tabla de elementos HTML con roles predeterminados)](https://www.w3.org/TR/html-aria/#docconformance), hay que tener en cuenta que introducir un *atributo role* en un elemento que ya lo tiene por defecto, nos puede causar problemas, ya que podríamos introducir un *role* que no le corresponde.\n \t\n Si tenemos varios elementos con el mismo *role* podríamos buscarlo por su [nombre accesible](https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/) nombre accesible, dicha busqueda no sustituye a *ByAlt o ByTitle*.\n \t\n Tenemos varias opciones que podemos configurar para la búsqueda, como *hidden, selected, checked, pressed, queryFallbacks y levels* (podrás ver algo más sobre la configuración en la parte **ByRole** que encuentras **[en la documentación](https://testing-library.com/docs/dom-testing-library/api-queries)**).\n \t\n\t\t\n```\ngetByRole(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  role: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    hidden?: boolean = false,\n\t\t    name?: TextMatch,\n\t\t    normalizer?: NormalizerFn,\n\t\t    selected?: boolean,\n\t\t    checked?: boolean,\n\t\t    pressed?: boolean,\n\t\t    queryFallbacks?: boolean,\n\t\t    level?: number,\n\t\t  }): HTMLElement\n```\n          \n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./ByRole.scss\";\n\nconst ByRole = () => {\n  return (\n    <>\n      <div className={\"byRole\"}>\n        <header>\n          <h3>This is to prove the queries ByRole</h3>\n        </header>\n\n        <button type=\"submit\">This is a submit button</button>\n\n        <button type=\"reset\">This is a reset button</button>\n\n        <button type=\"button\">This is a button</button>\n      </div>\n    </>\n  );\n};\n\nexport default ByRole;\n```\n\n<br/>\n\n**Test**\n\n```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport ByRole from \"./ByRole\";\n\ntest(\"to testing byRole\", () => {\n  Testing.render(<ByRole />);\n  Testing.screen.getByRole(\"button\", { name: \"This is a reset button\" });\n});\n\n\n```\n<br/>\n\n**ByTestId**\n\nSolamente es recomendable cuando ninguna de las *queries* anteriores nos permite hacer la búsqueda.\n    \n        \n```\ngetByTestId(\n      container: HTMLElement, // if you're using `screen`, then skip this argument\n      text: TextMatch,\n      options?: {\n        exact?: boolean = true,\n        normalizer?: NormalizerFn,\n      }): HTMLElement\n```\n<br/>\n\n* **Ejemplo en código**\n\n\n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./ExampleByTestId.scss\";\nconst ExampleByTestId = () => {\n  return (\n    <div className={\"byTestId\"} data-testid={\"custom-element\"}>\n      <p>Testing ByTestId</p>\n    </div>\n  );\n};\n\nexport default ExampleByTestId;\n```\n<br/>\n\n**Test**\n\n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport ExampleByTestId from \"./ExampleByTestId\";\n\n\ntest('testing getByTestId',()=>{\n    Testing.render(<ExampleByTestId/>);\n    Testing.screen.getByTestId('custom-element');\n});\n\n\n```\n<br/>\n\nEn este post he querido ver las *queries* que nos brinda esta librería, para terminar mi aprendizaje de **React Testing** veremos en el siguiente los **Firing Events** y algunos de los **métodos que hereda de DOM Testing Library** .\n\n***Nos vemos en el próximo post,......***","source":"_posts/Testing-segunda-parte.md","raw":"layout: un novato junto a react\ntitle: Un novato junto a \"React Testing\" segunda parte...\ntags: []\ncategories: []\ndate: 2021-01-15 07:49:00\n---\n![](https://i.imgur.com/StMOQvK.png)\n\n\n\nEste segundo post, es la continuación de un total de tres sobre mis experiencia durante el estudio de la libreía **React Testing**. En la [primera parte](https://www.samuelromeroarbelo.com/2020/11/28/React-Testing/) empecé con una pequeña descripción y sus ventajas, en esta segunda parte vamos a ver un poco más sobre ella ya que nos centraremos en las **queries** o **consultas**, las cuales nos van ayudar para la realización de los test.\n\n# Queries o Consultas\n\n* #### Variantes\n\n\t* **Variantes que devuelven el primer elemento**\n\t\n\t\t- **getBy :** Retorna el primer nodo que coincide para una consulta, la cual arroja un error si no encuentra un elemento coincidente o si se encuentra más de uno.\n\t\t\t\t\t\t\n\t\t- **querryBy :** Retorna el primer nodo que coincide con la consulta y nos devuelve un **null** si no encuentra coincidencias. Como nos comenta la documentacion, este tipo de consultas es muy útil si queremos verificar que un elemento está presente o no.\t\n\t\t\n\t\t- **findBy :** Retorna una promesa, la cual se resuelve cuando se encuentra un elemento coincidente con la consulta realizada, si no encuentro ninguna coincidencia o nos encuentra más de una después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.\n\t\t\n\t* **Variantes que devuelven un array de elementos**\n\t\n\t\t- **getAllBy :** Retorna un array con todos los nodos coincidentes, nos devolvería un error si no encuentra elementos para dicha consulta.\n\t\t\t\t\t\t\n\t\t- **querryAllBy :** Retorna un array con todos los nodos coincidentes para la consulta y una array vacío si no encuntra coincidencias.\t\n\t\t\n\t\t- **findAllBy :** Retorna una promesa, la cual se resuelve en un array cuando se encuentra los nodos coincidente con la consulta realizada, si no encuentro ninguna coincidencia después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.\n\n\n* #### Opciones \n\nLos argumentos de una consulta pueden ser *string, expresion regular o funciones*, además podemos encontrar opciones para ajustar como el nodo es analizado, la cuales son :\n\n*  *Precision:*\n\n\tAlgunas Apis acepta un objeto como final del argumento que se le pasa en la consulta y que puede afectar la precisión de la coincidencias de las *string* pasada:\n\t\n\t* **exact :** Por defecto viene en *true*, coincide con cadenas completas y distingue entre mayúsculas y minúsculas. Cuando es inicializado a *false* coincide con subcadenas y no distingue entre mayúsculas y minúsculas. \n\t\tEn la documentación aconsejan que usar *expresiones regulares* porque te dan más control sobre la coincidencia aproximada.\n\t\n\t* **normalizer :** Con esta opción lo que hacemos es anular el comportamiento de *Normalization*, la cual se ejecuta siempre antes de la lógica para la búsqueda. \n\n* *Normalización:*\n\n\tComo comentamos en una de la opciones de la precisión, esta se ejecuta antes de la lógica y por defecto quita los espacios en blanco antes y después del texto y regulariza los espacios entre palabras a uno sólo.\n\t\n\tSi queremo evitar esta normalización o poner opciones alternativas, les podemos pasar una **normalizer function**, la cual recibirá una *string* y espera una versión normalizada de dicha *string*.\n\t\n\tTenemos el método **getDefaultNormalizer**, el cual nos permite introducirlo en nuestra opciones y pasarle como parámetro:\n\t\n\t* **trim:** El cual nos quitará los espacios en blanco, tanto al principio como al final de la cadena, viene como predeterminado en *true*.\n\t\t* **collapseWhitespace:** Nos quitaría los espacios extras entre palabras dejándolo solamentes en uno, viene por defecto en *true*.\n\n\n* **Screen** \n\n\tTodas las consultas que exportamos mediante el *DOM Testing Library* aceptan un contenedor como primer argumento y es común consultar todo el *document.body*, por eso la librería *DOM Testing Library* también nos exporta un objeto **screen** el cual contiene todas las consultas que están vinculadas previamente usando la funcionalidad *within*, que podemos encontrar en el apartado [*Custom Queries*](https://testing-library.com/docs/dom-testing-library/api-helpers/#custom-queries).\n\n\n* **Screen.debug**\n\n\tMétodo que nos ayuda hacer *debug* del documento en un sólo elemento o en un array de elementos.\n\n\n* **Queries**\n\n\tEstas consultas, son consultas base y requieren de le pasemos un contenedor como primer argumento.\n\n<br/>\n\n **ByLabelText** \n\t\nNos buscará la etiqueta que coincida con el *TextMatch* que le pasemos y luego nos encontrará el elemento asociado con dicha etiqueta.\n\t\n\t\n   ```\n        getByLabelText(\n              container: HTMLElement, //if you're using `screen`, then skip this argument\n              text: TextMatch,\n              options?: {\n                selector?: string = '*',\n                exact?: boolean = true,\n                normalizer?: NormalizerFn,\n              }): HTMLElement\n   ```\n\n\n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n       \n   \n```\nimport * as React from \"react\";\nimport \"./Label.scss\";\nconst Label = () => {\n  return (\n    <>\n      <div className={\"classLabel\"}>\n        <label htmlFor=\"username-input\">\n          Testing getByLabelText and getByText\n        </label>\n        <input id=\"username-input\" />\n      </div>\n    </>\n  );\n};\n\nexport default Label;\n```\n\n<br/>\n\n **Test**\n\n  ```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport Label from \"./Label\";\n\ntest(\"for label queries\", () => {\n  Testing.render(<Label/>);\n  Testing.screen.getByLabelText(\"Testing getByLabelText and getByText\");\n});\n  ```\n\n<br/>\n\n**ByPlaceholderText**\n\t\nNos buscará en todos los elementos que contentagan *placeholder* hasta econtrar uno que coincida con el *TextMatch* que le pasemos.\n\t\n\t \n\n  ```\n      getByPlaceholderText(\n            container: HTMLElement, //if you're using `screen`, then skip this argument\n            text: TextMatch,\n            options?: {\n              exact?: boolean = true,\n              normalizer?: NormalizerFn,\n            }): HTMLElement\n  ```\n<br/>\n\n* **Ejemplo en código**\n       \n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./InputWithPlaceHolder.scss\";\n\nconst InputWithPlaceHolder = () => {\n  return (\n    <div className={\"input-place-holder\"}>\n      <h3>Testing getByPlaceholderText</h3>\n      <input type=\"text\" placeholder={\"I am a placeholder\"} />\n    </div>\n  );\n};\n\nexport default InputWithPlaceHolder;\n```\n<br/>\n\n**Test**\n    \n```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport InputWithPlaceHolder from \"./InputWithPlaceHolder\";\n\ntest(\"testing getBy Placeholder\", () => {\n  Testing.render(<InputWithPlaceHolder />);\n  Testing.screen.getByPlaceholderText(\"I am a placeholder\");\n});\n\n```\n\t\n~ **Buscar por placeholder no es la mejor opción, por lo general se usa getByLabelText** ~\n\n<br/>\n\n**ByText**\n\t\nNos buscará  en todos lo elementos que contengan texto en el nodo con *textContent* que coincida con el *TextMatch* que le pasemos. Además funciona con *inputs* cuyo atributos sean del tipo *submit o button*. \n\nPodemos pasarle como opción *ignore* en estado *false* si queremos evitar que nos devuelva como *true* una etiqueta script.\n\t\n```\n\t\tgetByText(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  text: TextMatch,\n\t\t  options?: {\n\t\t    selector?: string = '*',\n\t\t    exact?: boolean = true,\n\t\t    ignore?: string|boolean = 'script, style',\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n\n<br/>\n\n* **Ejemplo en código**\n\n\n\n**Componente**\n       \n\n```\n        import * as React from 'react';\n\n        const Label = () => {\n\n            return (<><label htmlFor=\"username-input\">Label</label>\n                <input id=\"username-input\"/>\n            </>);\n        };\n\n        export default Label;\n```\n<br/>\n\n**Test**\n    \n```\n    import * as React from 'react';\n    import * as Testing from '@testing-library/react';\n    import Label from \"./Label\";\n\n\n    test('queries getByText', () => {\n\n        Testing.render(<Label/>);\n        Testing.screen.getByText(/Label/i);\n\n    });\n```\n\n<br/>\n\n**ByAltText**\n\t\nEsta búsqueda es solamente soportada por elementos que contengan el atributo **alt**,como por ejemplo`<img>, <input> y <area>` ya que nos devolvería dichos elementos si su atributo *alt* coincide con el *TextMatch* indicado.\n\t\n\n```\n\t\tgetByAltText(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  text: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n       \n```\nimport * as React from \"react\";\nimport IconReactTesting from \"../../img/octopus-128x128.png\";\nimport \"./Img.scss\";\n\nconst Img = () => {\n  return (\n    <div className={\"img-class\"}>\n      <h3>Testing ByAltText</h3>\n      <img src={IconReactTesting} alt={\"This is a img\"} />\n    </div>\n  );\n};\n\nexport default Img;\n\n```\n<br/>\n\n**Test**\n\n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport Img from '../Img/Img';\n\ntest('queries getByAltText', () => {\n\n    Testing.render(<Img/>);\n    Testing.screen.getByAltText('This is a img');\n})\n```\n<br/>\n\n**ByTitle**\n\t\nEsta búsqueda nos devolvería el elemento que contenga en su atributo *title* el *TextMatch* que le pasemos, funcionaría con elementos *svg* ya que contengan dentro la etiqueta *title*. \n\t\n```\n\t\tgetByTitle(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  title: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n\n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n       \n```\nimport * as React from \"react\";\nimport \"./InputWithTitle.scss\";\n\nconst InputWithTitle = () => {\n  return (\n    <div className={\"input-with-title\"}>\n      <h3>Testing ByTitle</h3>\n      <input type={\"text\"} title={\"This a input with title\"} />\n    </div>\n  );\n};\n\nexport default InputWithTitle;\n\n\n```\n<br/>\n\n**Test**\n     \n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport InputWithTitle from \"./InputWithTitle\";\n\ntest('queries getByTitle', () => {\n    Testing.render(<InputWithTitle/>);\n    Testing.screen.getByTitle('This a input with title');\n})\n```\n<br/>\n\n**ByDisplayValue**\n\t\nEsta búsqueda nos devolvería el **input, textarea o select** que contengan el valor indicado en el *TextMatch*.\n\t\n\n```\n\t\tgetByDisplayValue(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  value: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    normalizer?: NormalizerFn,\n\t\t  }): HTMLElement\n```\n<br/>\n\n* **Ejemplo en código**\n\n\n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./InputWithDisplayValue.scss\";\n\nconst InputWithDisplayValue = () => {\n  return (\n    <div className={\"display-value\"}>\n      <h3>Testing ByDisplayValue</h3>\n      <input\n        type={\"text\"}\n        title={\"This a input with title\"}\n        value={\"This a input with display value\"}\n        readOnly={true}\n      />\n    </div>\n  );\n};\n\nexport default InputWithDisplayValue;\n\n\n```\n<br/>\n\n**Test**\n     \n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport InputWithDisplayValue from \"./InputWithDisplayValue\";\n\ntest('queries getByTitle', () => {\n    Testing.render(<InputWithDisplayValue/>);\n    Testing.screen.getByDisplayValue('This a input with display value');\n});\n```\n<br/>\t\n\n**ByRole**\n \t\n Búsqueda por el atributo *role* incluyendo también en los elementos que ya tienen dicha etiqueta implícita [(tabla de elementos HTML con roles predeterminados)](https://www.w3.org/TR/html-aria/#docconformance), hay que tener en cuenta que introducir un *atributo role* en un elemento que ya lo tiene por defecto, nos puede causar problemas, ya que podríamos introducir un *role* que no le corresponde.\n \t\n Si tenemos varios elementos con el mismo *role* podríamos buscarlo por su [nombre accesible](https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/) nombre accesible, dicha busqueda no sustituye a *ByAlt o ByTitle*.\n \t\n Tenemos varias opciones que podemos configurar para la búsqueda, como *hidden, selected, checked, pressed, queryFallbacks y levels* (podrás ver algo más sobre la configuración en la parte **ByRole** que encuentras **[en la documentación](https://testing-library.com/docs/dom-testing-library/api-queries)**).\n \t\n\t\t\n```\ngetByRole(\n\t\t  container: HTMLElement, //if you're using `screen`, then skip this argument\n\t\t  role: TextMatch,\n\t\t  options?: {\n\t\t    exact?: boolean = true,\n\t\t    hidden?: boolean = false,\n\t\t    name?: TextMatch,\n\t\t    normalizer?: NormalizerFn,\n\t\t    selected?: boolean,\n\t\t    checked?: boolean,\n\t\t    pressed?: boolean,\n\t\t    queryFallbacks?: boolean,\n\t\t    level?: number,\n\t\t  }): HTMLElement\n```\n          \n<br/>\n\n* **Ejemplo en código**\n       \n\n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./ByRole.scss\";\n\nconst ByRole = () => {\n  return (\n    <>\n      <div className={\"byRole\"}>\n        <header>\n          <h3>This is to prove the queries ByRole</h3>\n        </header>\n\n        <button type=\"submit\">This is a submit button</button>\n\n        <button type=\"reset\">This is a reset button</button>\n\n        <button type=\"button\">This is a button</button>\n      </div>\n    </>\n  );\n};\n\nexport default ByRole;\n```\n\n<br/>\n\n**Test**\n\n```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport ByRole from \"./ByRole\";\n\ntest(\"to testing byRole\", () => {\n  Testing.render(<ByRole />);\n  Testing.screen.getByRole(\"button\", { name: \"This is a reset button\" });\n});\n\n\n```\n<br/>\n\n**ByTestId**\n\nSolamente es recomendable cuando ninguna de las *queries* anteriores nos permite hacer la búsqueda.\n    \n        \n```\ngetByTestId(\n      container: HTMLElement, // if you're using `screen`, then skip this argument\n      text: TextMatch,\n      options?: {\n        exact?: boolean = true,\n        normalizer?: NormalizerFn,\n      }): HTMLElement\n```\n<br/>\n\n* **Ejemplo en código**\n\n\n\n**Componente**\n\n```\nimport * as React from \"react\";\nimport \"./ExampleByTestId.scss\";\nconst ExampleByTestId = () => {\n  return (\n    <div className={\"byTestId\"} data-testid={\"custom-element\"}>\n      <p>Testing ByTestId</p>\n    </div>\n  );\n};\n\nexport default ExampleByTestId;\n```\n<br/>\n\n**Test**\n\n```\nimport * as React from 'react';\nimport * as Testing from '@testing-library/react';\nimport ExampleByTestId from \"./ExampleByTestId\";\n\n\ntest('testing getByTestId',()=>{\n    Testing.render(<ExampleByTestId/>);\n    Testing.screen.getByTestId('custom-element');\n});\n\n\n```\n<br/>\n\nEn este post he querido ver las *queries* que nos brinda esta librería, para terminar mi aprendizaje de **React Testing** veremos en el siguiente los **Firing Events** y algunos de los **métodos que hereda de DOM Testing Library** .\n\n***Nos vemos en el próximo post,......***","slug":"Testing-segunda-parte","published":1,"updated":"2021-05-09T10:46:09.154Z","_id":"ckjxze66i00009vs2cjt8afe5","comments":1,"photos":[],"link":"","content":"<p><img src=\"https://i.imgur.com/StMOQvK.png\" alt=\"\"></p>\n<p>Este segundo post, es la continuación de un total de tres sobre mis experiencia durante el estudio de la libreía <strong>React Testing</strong>. En la <a href=\"https://www.samuelromeroarbelo.com/2020/11/28/React-Testing/\" target=\"_blank\" rel=\"noopener\">primera parte</a> empecé con una pequeña descripción y sus ventajas, en esta segunda parte vamos a ver un poco más sobre ella ya que nos centraremos en las <strong>queries</strong> o <strong>consultas</strong>, las cuales nos van ayudar para la realización de los test.</p>\n<h1 id=\"Queries-o-Consultas\"><a href=\"#Queries-o-Consultas\" class=\"headerlink\" title=\"Queries o Consultas\"></a>Queries o Consultas</h1><ul>\n<li><h4 id=\"Variantes\"><a href=\"#Variantes\" class=\"headerlink\" title=\"Variantes\"></a>Variantes</h4><ul>\n<li><p><strong>Variantes que devuelven el primer elemento</strong></p>\n<ul>\n<li><p><strong>getBy :</strong> Retorna el primer nodo que coincide para una consulta, la cual arroja un error si no encuentra un elemento coincidente o si se encuentra más de uno.</p>\n</li>\n<li><p><strong>querryBy :</strong> Retorna el primer nodo que coincide con la consulta y nos devuelve un <strong>null</strong> si no encuentra coincidencias. Como nos comenta la documentacion, este tipo de consultas es muy útil si queremos verificar que un elemento está presente o no.    </p>\n</li>\n<li><p><strong>findBy :</strong> Retorna una promesa, la cual se resuelve cuando se encuentra un elemento coincidente con la consulta realizada, si no encuentro ninguna coincidencia o nos encuentra más de una después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Variantes que devuelven un array de elementos</strong></p>\n<ul>\n<li><p><strong>getAllBy :</strong> Retorna un array con todos los nodos coincidentes, nos devolvería un error si no encuentra elementos para dicha consulta.</p>\n</li>\n<li><p><strong>querryAllBy :</strong> Retorna un array con todos los nodos coincidentes para la consulta y una array vacío si no encuntra coincidencias.    </p>\n</li>\n<li><p><strong>findAllBy :</strong> Retorna una promesa, la cual se resuelve en un array cuando se encuentra los nodos coincidente con la consulta realizada, si no encuentro ninguna coincidencia después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"Opciones\"><a href=\"#Opciones\" class=\"headerlink\" title=\"Opciones\"></a>Opciones</h4></li>\n</ul>\n<p>Los argumentos de una consulta pueden ser <em>string, expresion regular o funciones</em>, además podemos encontrar opciones para ajustar como el nodo es analizado, la cuales son :</p>\n<ul>\n<li><p><em>Precision:</em></p>\n<p> Algunas Apis acepta un objeto como final del argumento que se le pasa en la consulta y que puede afectar la precisión de la coincidencias de las <em>string</em> pasada:</p>\n<ul>\n<li><p><strong>exact :</strong> Por defecto viene en <em>true</em>, coincide con cadenas completas y distingue entre mayúsculas y minúsculas. Cuando es inicializado a <em>false</em> coincide con subcadenas y no distingue entre mayúsculas y minúsculas.<br>  En la documentación aconsejan que usar <em>expresiones regulares</em> porque te dan más control sobre la coincidencia aproximada.</p>\n</li>\n<li><p><strong>normalizer :</strong> Con esta opción lo que hacemos es anular el comportamiento de <em>Normalization</em>, la cual se ejecuta siempre antes de la lógica para la búsqueda. </p>\n</li>\n</ul>\n</li>\n<li><p><em>Normalización:</em></p>\n<p>  Como comentamos en una de la opciones de la precisión, esta se ejecuta antes de la lógica y por defecto quita los espacios en blanco antes y después del texto y regulariza los espacios entre palabras a uno sólo.</p>\n<p>  Si queremo evitar esta normalización o poner opciones alternativas, les podemos pasar una <strong>normalizer function</strong>, la cual recibirá una <em>string</em> y espera una versión normalizada de dicha <em>string</em>.</p>\n<p>  Tenemos el método <strong>getDefaultNormalizer</strong>, el cual nos permite introducirlo en nuestra opciones y pasarle como parámetro:</p>\n<ul>\n<li><strong>trim:</strong> El cual nos quitará los espacios en blanco, tanto al principio como al final de la cadena, viene como predeterminado en <em>true</em>.<ul>\n<li><strong>collapseWhitespace:</strong> Nos quitaría los espacios extras entre palabras dejándolo solamentes en uno, viene por defecto en <em>true</em>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>Screen</strong> </p>\n<p>  Todas las consultas que exportamos mediante el <em>DOM Testing Library</em> aceptan un contenedor como primer argumento y es común consultar todo el <em>document.body</em>, por eso la librería <em>DOM Testing Library</em> también nos exporta un objeto <strong>screen</strong> el cual contiene todas las consultas que están vinculadas previamente usando la funcionalidad <em>within</em>, que podemos encontrar en el apartado <a href=\"https://testing-library.com/docs/dom-testing-library/api-helpers/#custom-queries\" target=\"_blank\" rel=\"noopener\"><em>Custom Queries</em></a>.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Screen.debug</strong></p>\n<p>  Método que nos ayuda hacer <em>debug</em> del documento en un sólo elemento o en un array de elementos.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Queries</strong></p>\n<p>  Estas consultas, son consultas base y requieren de le pasemos un contenedor como primer argumento.</p>\n</li>\n</ul>\n<br/>\n\n<p> <strong>ByLabelText</strong> </p>\n<p>Nos buscará la etiqueta que coincida con el <em>TextMatch</em> que le pasemos y luego nos encontrará el elemento asociado con dicha etiqueta.</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByLabelText(</span><br><span class=\"line\">      container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">      text: TextMatch,</span><br><span class=\"line\">      options?: &#123;</span><br><span class=\"line\">        selector?: string &#x3D; &#39;*&#39;,</span><br><span class=\"line\">        exact?: boolean &#x3D; true,</span><br><span class=\"line\">        normalizer?: NormalizerFn,</span><br><span class=\"line\">      &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;Label.scss&quot;;</span><br><span class=\"line\">const Label &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&#123;&quot;classLabel&quot;&#125;&gt;</span><br><span class=\"line\">        &lt;label htmlFor&#x3D;&quot;username-input&quot;&gt;</span><br><span class=\"line\">          Testing getByLabelText and getByText</span><br><span class=\"line\">        &lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;input id&#x3D;&quot;username-input&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Label;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p> <strong>Test</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import Label from &quot;.&#x2F;Label&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;for label queries&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;Label&#x2F;&gt;);</span><br><span class=\"line\">  Testing.screen.getByLabelText(&quot;Testing getByLabelText and getByText&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p><strong>ByPlaceholderText</strong></p>\n<p>Nos buscará en todos los elementos que contentagan <em>placeholder</em> hasta econtrar uno que coincida con el <em>TextMatch</em> que le pasemos.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByPlaceholderText(</span><br><span class=\"line\">      container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">      text: TextMatch,</span><br><span class=\"line\">      options?: &#123;</span><br><span class=\"line\">        exact?: boolean &#x3D; true,</span><br><span class=\"line\">        normalizer?: NormalizerFn,</span><br><span class=\"line\">      &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputWithPlaceHolder.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputWithPlaceHolder &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;input-place-holder&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing getByPlaceholderText&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&#123;&quot;I am a placeholder&quot;&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputWithPlaceHolder;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import InputWithPlaceHolder from &quot;.&#x2F;InputWithPlaceHolder&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;testing getBy Placeholder&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;InputWithPlaceHolder &#x2F;&gt;);</span><br><span class=\"line\">  Testing.screen.getByPlaceholderText(&quot;I am a placeholder&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>~ <strong>Buscar por placeholder no es la mejor opción, por lo general se usa getByLabelText</strong> ~</p>\n<br/>\n\n<p><strong>ByText</strong></p>\n<p>Nos buscará  en todos lo elementos que contengan texto en el nodo con <em>textContent</em> que coincida con el <em>TextMatch</em> que le pasemos. Además funciona con <em>inputs</em> cuyo atributos sean del tipo <em>submit o button</em>. </p>\n<p>Podemos pasarle como opción <em>ignore</em> en estado <em>false</em> si queremos evitar que nos devuelva como <em>true</em> una etiqueta script.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByText(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  text: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    selector?: string &#x3D; &#39;*&#39;,</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    ignore?: string|boolean &#x3D; &#39;script, style&#39;,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const Label &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (&lt;&gt;&lt;label htmlFor&#x3D;&quot;username-input&quot;&gt;Label&lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;input id&#x3D;&quot;username-input&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Label;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import Label from &quot;.&#x2F;Label&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByText&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.render(&lt;Label&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByText(&#x2F;Label&#x2F;i);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p><strong>ByAltText</strong></p>\n<p>Esta búsqueda es solamente soportada por elementos que contengan el atributo <strong>alt</strong>,como por ejemplo<code>&lt;img&gt;, &lt;input&gt; y &lt;area&gt;</code> ya que nos devolvería dichos elementos si su atributo <em>alt</em> coincide con el <em>TextMatch</em> indicado.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByAltText(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  text: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import IconReactTesting from &quot;..&#x2F;..&#x2F;img&#x2F;octopus-128x128.png&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;Img.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const Img &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;img-class&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing ByAltText&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;img src&#x3D;&#123;IconReactTesting&#125; alt&#x3D;&#123;&quot;This is a img&quot;&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Img;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import Img from &#39;..&#x2F;Img&#x2F;Img&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByAltText&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.render(&lt;Img&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByAltText(&#39;This is a img&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>ByTitle</strong></p>\n<p>Esta búsqueda nos devolvería el elemento que contenga en su atributo <em>title</em> el <em>TextMatch</em> que le pasemos, funcionaría con elementos <em>svg</em> ya que contengan dentro la etiqueta <em>title</em>. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByTitle(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  title: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputWithTitle.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputWithTitle &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;input-with-title&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing ByTitle&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&#123;&quot;text&quot;&#125; title&#x3D;&#123;&quot;This a input with title&quot;&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputWithTitle;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import InputWithTitle from &quot;.&#x2F;InputWithTitle&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByTitle&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    Testing.render(&lt;InputWithTitle&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByTitle(&#39;This a input with title&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>ByDisplayValue</strong></p>\n<p>Esta búsqueda nos devolvería el <strong>input, textarea o select</strong> que contengan el valor indicado en el <em>TextMatch</em>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByDisplayValue(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  value: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputWithDisplayValue.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputWithDisplayValue &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;display-value&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing ByDisplayValue&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        type&#x3D;&#123;&quot;text&quot;&#125;</span><br><span class=\"line\">        title&#x3D;&#123;&quot;This a input with title&quot;&#125;</span><br><span class=\"line\">        value&#x3D;&#123;&quot;This a input with display value&quot;&#125;</span><br><span class=\"line\">        readOnly&#x3D;&#123;true&#125;</span><br><span class=\"line\">      &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputWithDisplayValue;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import InputWithDisplayValue from &quot;.&#x2F;InputWithDisplayValue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByTitle&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    Testing.render(&lt;InputWithDisplayValue&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByDisplayValue(&#39;This a input with display value&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br/>    \n\n<p><strong>ByRole</strong></p>\n<p> Búsqueda por el atributo <em>role</em> incluyendo también en los elementos que ya tienen dicha etiqueta implícita <a href=\"https://www.w3.org/TR/html-aria/#docconformance\" target=\"_blank\" rel=\"noopener\">(tabla de elementos HTML con roles predeterminados)</a>, hay que tener en cuenta que introducir un <em>atributo role</em> en un elemento que ya lo tiene por defecto, nos puede causar problemas, ya que podríamos introducir un <em>role</em> que no le corresponde.</p>\n<p> Si tenemos varios elementos con el mismo <em>role</em> podríamos buscarlo por su <a href=\"https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/\" target=\"_blank\" rel=\"noopener\">nombre accesible</a> nombre accesible, dicha busqueda no sustituye a <em>ByAlt o ByTitle</em>.</p>\n<p> Tenemos varias opciones que podemos configurar para la búsqueda, como <em>hidden, selected, checked, pressed, queryFallbacks y levels</em> (podrás ver algo más sobre la configuración en la parte <strong>ByRole</strong> que encuentras <strong><a href=\"https://testing-library.com/docs/dom-testing-library/api-queries\" target=\"_blank\" rel=\"noopener\">en la documentación</a></strong>).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByRole(</span><br><span class=\"line\">\t\t  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">\t\t  role: TextMatch,</span><br><span class=\"line\">\t\t  options?: &#123;</span><br><span class=\"line\">\t\t    exact?: boolean &#x3D; true,</span><br><span class=\"line\">\t\t    hidden?: boolean &#x3D; false,</span><br><span class=\"line\">\t\t    name?: TextMatch,</span><br><span class=\"line\">\t\t    normalizer?: NormalizerFn,</span><br><span class=\"line\">\t\t    selected?: boolean,</span><br><span class=\"line\">\t\t    checked?: boolean,</span><br><span class=\"line\">\t\t    pressed?: boolean,</span><br><span class=\"line\">\t\t    queryFallbacks?: boolean,</span><br><span class=\"line\">\t\t    level?: number,</span><br><span class=\"line\">\t\t  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;ByRole.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const ByRole &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&#123;&quot;byRole&quot;&#125;&gt;</span><br><span class=\"line\">        &lt;header&gt;</span><br><span class=\"line\">          &lt;h3&gt;This is to prove the queries ByRole&lt;&#x2F;h3&gt;</span><br><span class=\"line\">        &lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;button type&#x3D;&quot;submit&quot;&gt;This is a submit button&lt;&#x2F;button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;button type&#x3D;&quot;reset&quot;&gt;This is a reset button&lt;&#x2F;button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;button type&#x3D;&quot;button&quot;&gt;This is a button&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ByRole;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import ByRole from &quot;.&#x2F;ByRole&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;to testing byRole&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;ByRole &#x2F;&gt;);</span><br><span class=\"line\">  Testing.screen.getByRole(&quot;button&quot;, &#123; name: &quot;This is a reset button&quot; &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>ByTestId</strong></p>\n<p>Solamente es recomendable cuando ninguna de las <em>queries</em> anteriores nos permite hacer la búsqueda.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByTestId(</span><br><span class=\"line\">      container: HTMLElement, &#x2F;&#x2F; if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">      text: TextMatch,</span><br><span class=\"line\">      options?: &#123;</span><br><span class=\"line\">        exact?: boolean &#x3D; true,</span><br><span class=\"line\">        normalizer?: NormalizerFn,</span><br><span class=\"line\">      &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;ExampleByTestId.scss&quot;;</span><br><span class=\"line\">const ExampleByTestId &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;byTestId&quot;&#125; data-testid&#x3D;&#123;&quot;custom-element&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;p&gt;Testing ByTestId&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ExampleByTestId;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import ExampleByTestId from &quot;.&#x2F;ExampleByTestId&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;testing getByTestId&#39;,()&#x3D;&gt;&#123;</span><br><span class=\"line\">    Testing.render(&lt;ExampleByTestId&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByTestId(&#39;custom-element&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p>En este post he querido ver las <em>queries</em> que nos brinda esta librería, para terminar mi aprendizaje de <strong>React Testing</strong> veremos en el siguiente los <strong>Firing Events</strong> y algunos de los <strong>métodos que hereda de DOM Testing Library</strong> .</p>\n<p><strong><em>Nos vemos en el próximo post,……</em></strong></p>\n","site":{"data":{"contact":{"title":"Contacto","subtitle":"Medios de contacto.","items":[{"title":"Email","content":"oiranca@gmail.com"},{"title":"Perfil Linkedin","content":"Samuel Romero Arbelo","href":"#"}]},"about":{"title":"Un poco de mí","subtitle":"Curioso por naturaleza.","image":"img/perfil/photo_me.jpg","description":"<p>Mi nombre es <strong>Samuel Romero Arbelo</strong> soy de un pequeño pueblo llamado Ingenio, en la provincia de Las Palmas.</p>\n<p> Soy una persona <strong>curiosa</strong>, que le gusta estar siempre <strong>investigando</strong>, <strong>autodidacta</strong> ..., pero tengo que admitir que donde esté un buen equipo en el que todos aprendamos, me siento muy cómodo</p>\n<p>Empecé en este mundillo cuando tenía unos 21 años, en un Ciclo de Grado Superior de Telecomunicaciones en Informática, donde ví <strong>C++</strong>, pero por capricho de la vida, mi camino no fue el de la programación, aunque siempre se quedó dentro de mí el no poder dedicarme a ello.\n<p>Actualmente, he terminado el <strong>Ciclo Superior de Desarrollo de Aplicaciones Multiplataformas</strong>, el cual se ha centrado en adquirir comocimientos en tecnologías como <strong>Java</strong>, en bases de datos <strong>SQL</strong> y en el último curso vimos <strong>Android</strong>.</p>\n<p>Para introducirme en <strong>Frontend</strong> he realizado varios cursos y un bootcamp donde he podido adquirir conocimientos de <strong>JavaScript</strong>, <strong>Angular</strong>, <strong>HTML5</strong>, <strong>CSS3</strong> y <strong> React </strong>.</p>\n<p>Hoy en día sigo formándome, pero esta vez con un bootcamp orientado a <strong> Backend </strong> donde he podido ver <strong> Nodejs, Express, Base de datos SQL, NoSQL, Git,..s </strong>.</p>","skills":[{"name":"JavaScript / TypeScript"},{"name":"Angular / React"},{"name":"HTML5 / CSS3 / Sass"},{"name":"Nodejs / Express"},{"name":"Java"}]},"footer":{"line_01":"&copy 2020 Samuel Romero Arbelo"},"experience":{"title":"Experiencia","subtitle":"La propia vida.","items":[{"title":"Prácticas de Empresa en Lean Mind","content":"Las prácticas las he desarrollado como colaborador, en un proyecto open source para la plataforma Huella Positiva, en la cual hemos desarrollado el frontend con React.","href":"https://leanmind.es/es/","icon":"icon-info","featured":false}]},"hero":{"title":"Samuel Romero Arbelo","proposal_value":"Junior Developer","image":"img/japon/templo_izquierda.jpg"},"logo":{"image":"","image_dark":"","text":"","text_dark":""},"portfolio":{"title":"Proyectos","subtitle":"Siempre aprendiendo.","items":[{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/homeWork/Logo_HomeworK.png","hide_text":"Hide","title":"HomeWork (Android / Web)","subtitle":"Proyecto en Android y su versión Web","description":"<h2><b>HomeWork en Android</b> </h2> <p>En la versión de <b>android</b> he usado como tecnología <b>Java 8</b>, los datos de lo usuarios y todo lo necesario para el funcionamiento de la aplicación están alojados<b> en Firebase</b>. <h2><b>HomeWork Web</b> </h2> <p>En la versión <b>Web</b> he realizado la parte del frontend con <b>Angular 8</b> mientras que el backend ha sido desarrollado con <b>Node.js y Express</b>, montando una base de datos en <b>Mongodb</b>.</p>\n<h4><b><i>La versión web sigue en desarrollo.</i></b></h4>","tags":[{"text":"Versión Android","href":"https://github.com/Oiranca/pgl-project"},{"text":"Versión Web (Frontend) ","href":"https://github.com/Oiranca/frontend-homework"},{"text":"Versión Web (Backend)","href":"https://github.com/Oiranca/backend-homework"}],"parameters":[{"title":"Versión en Android","text":"Java / Firebase"},{"title":"Versión Web","text":"Angular 8 / Node.js / Express / Mongodb"}]},{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/huellapositiva/cropped-Logo-Huella-Positiva-PV-05-fondo2.png","hide_text":"Hide","title":"Huella Positiva (Web)","subtitle":"Proyecto Colaborativo","description":"<p>Es un proyecto colaborativo para una ONG llamada <i><strong>Soy Mamut</strong></i>, donde formo parte el equipo de <strong>FrontEnd</strong>.</p>\n<p>Juntos estamos migrando su web de <strong>Wordpress</strong> a <strong> React. </strong></p> ","cta":"Web Original HuellaPositiva","href":"https://huellapositiva.com/?fbclid=IwAR0yqc2Hwb4tNGAvt0bNT_3Uyx6kPxfuDRD226XI2b-p_hn9e8tmPEM2_8U","tags":[{"text":"Repositorio Frontend ","href":"https://github.com/ayudadigital/huelladigital-frontend"},{"text":"Repositorio Backend ","href":"https://github.com/ayudadigital/huelladigital-backend"}],"parameters":[{"title":"Lenguaje","text":"TypeScript"},{"title":"Tecnología","text":"React"}]}]},"menu":[{"text":"Incio","href":"#body"},{"text":"Un poco de mí","href":"#about"},{"text":"Experiencia","href":"#experience"},{"text":"Proyectos","href":"#work"},{"text":"Contacto","href":"#contact"},{"text":"Blog","href":"blog"}],"social":[{"text":"Github","href":"https://github.com/Oiranca","icon":"icon-social-github"},{"text":"Twitter","href":"https://twitter.com/Oiranca","icon":"icon-social-twitter"},{"text":"Linkedin","href":"https://www.linkedin.com/in/samuel-romero-arbelo/","icon":"icon-social-linkedin"}]}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/StMOQvK.png\" alt=\"\"></p>\n<p>Este segundo post, es la continuación de un total de tres sobre mis experiencia durante el estudio de la libreía <strong>React Testing</strong>. En la <a href=\"https://www.samuelromeroarbelo.com/2020/11/28/React-Testing/\" target=\"_blank\" rel=\"noopener\">primera parte</a> empecé con una pequeña descripción y sus ventajas, en esta segunda parte vamos a ver un poco más sobre ella ya que nos centraremos en las <strong>queries</strong> o <strong>consultas</strong>, las cuales nos van ayudar para la realización de los test.</p>\n<h1 id=\"Queries-o-Consultas\"><a href=\"#Queries-o-Consultas\" class=\"headerlink\" title=\"Queries o Consultas\"></a>Queries o Consultas</h1><ul>\n<li><h4 id=\"Variantes\"><a href=\"#Variantes\" class=\"headerlink\" title=\"Variantes\"></a>Variantes</h4><ul>\n<li><p><strong>Variantes que devuelven el primer elemento</strong></p>\n<ul>\n<li><p><strong>getBy :</strong> Retorna el primer nodo que coincide para una consulta, la cual arroja un error si no encuentra un elemento coincidente o si se encuentra más de uno.</p>\n</li>\n<li><p><strong>querryBy :</strong> Retorna el primer nodo que coincide con la consulta y nos devuelve un <strong>null</strong> si no encuentra coincidencias. Como nos comenta la documentacion, este tipo de consultas es muy útil si queremos verificar que un elemento está presente o no.    </p>\n</li>\n<li><p><strong>findBy :</strong> Retorna una promesa, la cual se resuelve cuando se encuentra un elemento coincidente con la consulta realizada, si no encuentro ninguna coincidencia o nos encuentra más de una después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Variantes que devuelven un array de elementos</strong></p>\n<ul>\n<li><p><strong>getAllBy :</strong> Retorna un array con todos los nodos coincidentes, nos devolvería un error si no encuentra elementos para dicha consulta.</p>\n</li>\n<li><p><strong>querryAllBy :</strong> Retorna un array con todos los nodos coincidentes para la consulta y una array vacío si no encuntra coincidencias.    </p>\n</li>\n<li><p><strong>findAllBy :</strong> Retorna una promesa, la cual se resuelve en un array cuando se encuentra los nodos coincidente con la consulta realizada, si no encuentro ninguna coincidencia después de que pasen los 1000 ms que tiene predeterminados, nos rechaza dicha promesa.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h4 id=\"Opciones\"><a href=\"#Opciones\" class=\"headerlink\" title=\"Opciones\"></a>Opciones</h4></li>\n</ul>\n<p>Los argumentos de una consulta pueden ser <em>string, expresion regular o funciones</em>, además podemos encontrar opciones para ajustar como el nodo es analizado, la cuales son :</p>\n<ul>\n<li><p><em>Precision:</em></p>\n<p> Algunas Apis acepta un objeto como final del argumento que se le pasa en la consulta y que puede afectar la precisión de la coincidencias de las <em>string</em> pasada:</p>\n<ul>\n<li><p><strong>exact :</strong> Por defecto viene en <em>true</em>, coincide con cadenas completas y distingue entre mayúsculas y minúsculas. Cuando es inicializado a <em>false</em> coincide con subcadenas y no distingue entre mayúsculas y minúsculas.<br>  En la documentación aconsejan que usar <em>expresiones regulares</em> porque te dan más control sobre la coincidencia aproximada.</p>\n</li>\n<li><p><strong>normalizer :</strong> Con esta opción lo que hacemos es anular el comportamiento de <em>Normalization</em>, la cual se ejecuta siempre antes de la lógica para la búsqueda. </p>\n</li>\n</ul>\n</li>\n<li><p><em>Normalización:</em></p>\n<p>  Como comentamos en una de la opciones de la precisión, esta se ejecuta antes de la lógica y por defecto quita los espacios en blanco antes y después del texto y regulariza los espacios entre palabras a uno sólo.</p>\n<p>  Si queremo evitar esta normalización o poner opciones alternativas, les podemos pasar una <strong>normalizer function</strong>, la cual recibirá una <em>string</em> y espera una versión normalizada de dicha <em>string</em>.</p>\n<p>  Tenemos el método <strong>getDefaultNormalizer</strong>, el cual nos permite introducirlo en nuestra opciones y pasarle como parámetro:</p>\n<ul>\n<li><strong>trim:</strong> El cual nos quitará los espacios en blanco, tanto al principio como al final de la cadena, viene como predeterminado en <em>true</em>.<ul>\n<li><strong>collapseWhitespace:</strong> Nos quitaría los espacios extras entre palabras dejándolo solamentes en uno, viene por defecto en <em>true</em>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>Screen</strong> </p>\n<p>  Todas las consultas que exportamos mediante el <em>DOM Testing Library</em> aceptan un contenedor como primer argumento y es común consultar todo el <em>document.body</em>, por eso la librería <em>DOM Testing Library</em> también nos exporta un objeto <strong>screen</strong> el cual contiene todas las consultas que están vinculadas previamente usando la funcionalidad <em>within</em>, que podemos encontrar en el apartado <a href=\"https://testing-library.com/docs/dom-testing-library/api-helpers/#custom-queries\" target=\"_blank\" rel=\"noopener\"><em>Custom Queries</em></a>.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Screen.debug</strong></p>\n<p>  Método que nos ayuda hacer <em>debug</em> del documento en un sólo elemento o en un array de elementos.</p>\n</li>\n</ul>\n<ul>\n<li><p><strong>Queries</strong></p>\n<p>  Estas consultas, son consultas base y requieren de le pasemos un contenedor como primer argumento.</p>\n</li>\n</ul>\n<br/>\n\n<p> <strong>ByLabelText</strong> </p>\n<p>Nos buscará la etiqueta que coincida con el <em>TextMatch</em> que le pasemos y luego nos encontrará el elemento asociado con dicha etiqueta.</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByLabelText(</span><br><span class=\"line\">      container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">      text: TextMatch,</span><br><span class=\"line\">      options?: &#123;</span><br><span class=\"line\">        selector?: string &#x3D; &#39;*&#39;,</span><br><span class=\"line\">        exact?: boolean &#x3D; true,</span><br><span class=\"line\">        normalizer?: NormalizerFn,</span><br><span class=\"line\">      &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;Label.scss&quot;;</span><br><span class=\"line\">const Label &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&#123;&quot;classLabel&quot;&#125;&gt;</span><br><span class=\"line\">        &lt;label htmlFor&#x3D;&quot;username-input&quot;&gt;</span><br><span class=\"line\">          Testing getByLabelText and getByText</span><br><span class=\"line\">        &lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;input id&#x3D;&quot;username-input&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Label;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p> <strong>Test</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import Label from &quot;.&#x2F;Label&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;for label queries&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;Label&#x2F;&gt;);</span><br><span class=\"line\">  Testing.screen.getByLabelText(&quot;Testing getByLabelText and getByText&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p><strong>ByPlaceholderText</strong></p>\n<p>Nos buscará en todos los elementos que contentagan <em>placeholder</em> hasta econtrar uno que coincida con el <em>TextMatch</em> que le pasemos.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByPlaceholderText(</span><br><span class=\"line\">      container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">      text: TextMatch,</span><br><span class=\"line\">      options?: &#123;</span><br><span class=\"line\">        exact?: boolean &#x3D; true,</span><br><span class=\"line\">        normalizer?: NormalizerFn,</span><br><span class=\"line\">      &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputWithPlaceHolder.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputWithPlaceHolder &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;input-place-holder&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing getByPlaceholderText&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&#123;&quot;I am a placeholder&quot;&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputWithPlaceHolder;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import InputWithPlaceHolder from &quot;.&#x2F;InputWithPlaceHolder&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;testing getBy Placeholder&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;InputWithPlaceHolder &#x2F;&gt;);</span><br><span class=\"line\">  Testing.screen.getByPlaceholderText(&quot;I am a placeholder&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>~ <strong>Buscar por placeholder no es la mejor opción, por lo general se usa getByLabelText</strong> ~</p>\n<br/>\n\n<p><strong>ByText</strong></p>\n<p>Nos buscará  en todos lo elementos que contengan texto en el nodo con <em>textContent</em> que coincida con el <em>TextMatch</em> que le pasemos. Además funciona con <em>inputs</em> cuyo atributos sean del tipo <em>submit o button</em>. </p>\n<p>Podemos pasarle como opción <em>ignore</em> en estado <em>false</em> si queremos evitar que nos devuelva como <em>true</em> una etiqueta script.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByText(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  text: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    selector?: string &#x3D; &#39;*&#39;,</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    ignore?: string|boolean &#x3D; &#39;script, style&#39;,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">const Label &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (&lt;&gt;&lt;label htmlFor&#x3D;&quot;username-input&quot;&gt;Label&lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;input id&#x3D;&quot;username-input&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Label;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import Label from &quot;.&#x2F;Label&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByText&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.render(&lt;Label&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByText(&#x2F;Label&#x2F;i);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p><strong>ByAltText</strong></p>\n<p>Esta búsqueda es solamente soportada por elementos que contengan el atributo <strong>alt</strong>,como por ejemplo<code>&lt;img&gt;, &lt;input&gt; y &lt;area&gt;</code> ya que nos devolvería dichos elementos si su atributo <em>alt</em> coincide con el <em>TextMatch</em> indicado.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByAltText(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  text: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import IconReactTesting from &quot;..&#x2F;..&#x2F;img&#x2F;octopus-128x128.png&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;Img.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const Img &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;img-class&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing ByAltText&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;img src&#x3D;&#123;IconReactTesting&#125; alt&#x3D;&#123;&quot;This is a img&quot;&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Img;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import Img from &#39;..&#x2F;Img&#x2F;Img&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByAltText&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Testing.render(&lt;Img&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByAltText(&#39;This is a img&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>ByTitle</strong></p>\n<p>Esta búsqueda nos devolvería el elemento que contenga en su atributo <em>title</em> el <em>TextMatch</em> que le pasemos, funcionaría con elementos <em>svg</em> ya que contengan dentro la etiqueta <em>title</em>. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByTitle(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  title: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputWithTitle.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputWithTitle &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;input-with-title&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing ByTitle&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&#123;&quot;text&quot;&#125; title&#x3D;&#123;&quot;This a input with title&quot;&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputWithTitle;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import InputWithTitle from &quot;.&#x2F;InputWithTitle&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByTitle&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    Testing.render(&lt;InputWithTitle&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByTitle(&#39;This a input with title&#39;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>ByDisplayValue</strong></p>\n<p>Esta búsqueda nos devolvería el <strong>input, textarea o select</strong> que contengan el valor indicado en el <em>TextMatch</em>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByDisplayValue(</span><br><span class=\"line\">  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">  value: TextMatch,</span><br><span class=\"line\">  options?: &#123;</span><br><span class=\"line\">    exact?: boolean &#x3D; true,</span><br><span class=\"line\">    normalizer?: NormalizerFn,</span><br><span class=\"line\">  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputWithDisplayValue.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputWithDisplayValue &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;display-value&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Testing ByDisplayValue&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        type&#x3D;&#123;&quot;text&quot;&#125;</span><br><span class=\"line\">        title&#x3D;&#123;&quot;This a input with title&quot;&#125;</span><br><span class=\"line\">        value&#x3D;&#123;&quot;This a input with display value&quot;&#125;</span><br><span class=\"line\">        readOnly&#x3D;&#123;true&#125;</span><br><span class=\"line\">      &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputWithDisplayValue;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import InputWithDisplayValue from &quot;.&#x2F;InputWithDisplayValue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;queries getByTitle&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    Testing.render(&lt;InputWithDisplayValue&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByDisplayValue(&#39;This a input with display value&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br/>    \n\n<p><strong>ByRole</strong></p>\n<p> Búsqueda por el atributo <em>role</em> incluyendo también en los elementos que ya tienen dicha etiqueta implícita <a href=\"https://www.w3.org/TR/html-aria/#docconformance\" target=\"_blank\" rel=\"noopener\">(tabla de elementos HTML con roles predeterminados)</a>, hay que tener en cuenta que introducir un <em>atributo role</em> en un elemento que ya lo tiene por defecto, nos puede causar problemas, ya que podríamos introducir un <em>role</em> que no le corresponde.</p>\n<p> Si tenemos varios elementos con el mismo <em>role</em> podríamos buscarlo por su <a href=\"https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/\" target=\"_blank\" rel=\"noopener\">nombre accesible</a> nombre accesible, dicha busqueda no sustituye a <em>ByAlt o ByTitle</em>.</p>\n<p> Tenemos varias opciones que podemos configurar para la búsqueda, como <em>hidden, selected, checked, pressed, queryFallbacks y levels</em> (podrás ver algo más sobre la configuración en la parte <strong>ByRole</strong> que encuentras <strong><a href=\"https://testing-library.com/docs/dom-testing-library/api-queries\" target=\"_blank\" rel=\"noopener\">en la documentación</a></strong>).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByRole(</span><br><span class=\"line\">\t\t  container: HTMLElement, &#x2F;&#x2F;if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">\t\t  role: TextMatch,</span><br><span class=\"line\">\t\t  options?: &#123;</span><br><span class=\"line\">\t\t    exact?: boolean &#x3D; true,</span><br><span class=\"line\">\t\t    hidden?: boolean &#x3D; false,</span><br><span class=\"line\">\t\t    name?: TextMatch,</span><br><span class=\"line\">\t\t    normalizer?: NormalizerFn,</span><br><span class=\"line\">\t\t    selected?: boolean,</span><br><span class=\"line\">\t\t    checked?: boolean,</span><br><span class=\"line\">\t\t    pressed?: boolean,</span><br><span class=\"line\">\t\t    queryFallbacks?: boolean,</span><br><span class=\"line\">\t\t    level?: number,</span><br><span class=\"line\">\t\t  &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;ByRole.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const ByRole &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&#123;&quot;byRole&quot;&#125;&gt;</span><br><span class=\"line\">        &lt;header&gt;</span><br><span class=\"line\">          &lt;h3&gt;This is to prove the queries ByRole&lt;&#x2F;h3&gt;</span><br><span class=\"line\">        &lt;&#x2F;header&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;button type&#x3D;&quot;submit&quot;&gt;This is a submit button&lt;&#x2F;button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;button type&#x3D;&quot;reset&quot;&gt;This is a reset button&lt;&#x2F;button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;button type&#x3D;&quot;button&quot;&gt;This is a button&lt;&#x2F;button&gt;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ByRole;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import ByRole from &quot;.&#x2F;ByRole&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;to testing byRole&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;ByRole &#x2F;&gt;);</span><br><span class=\"line\">  Testing.screen.getByRole(&quot;button&quot;, &#123; name: &quot;This is a reset button&quot; &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>ByTestId</strong></p>\n<p>Solamente es recomendable cuando ninguna de las <em>queries</em> anteriores nos permite hacer la búsqueda.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getByTestId(</span><br><span class=\"line\">      container: HTMLElement, &#x2F;&#x2F; if you&#39;re using &#96;screen&#96;, then skip this argument</span><br><span class=\"line\">      text: TextMatch,</span><br><span class=\"line\">      options?: &#123;</span><br><span class=\"line\">        exact?: boolean &#x3D; true,</span><br><span class=\"line\">        normalizer?: NormalizerFn,</span><br><span class=\"line\">      &#125;): HTMLElement</span><br></pre></td></tr></table></figure>\n<br/>\n\n<ul>\n<li><strong>Ejemplo en código</strong></li>\n</ul>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;ExampleByTestId.scss&quot;;</span><br><span class=\"line\">const ExampleByTestId &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;byTestId&quot;&#125; data-testid&#x3D;&#123;&quot;custom-element&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;p&gt;Testing ByTestId&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default ExampleByTestId;</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p><strong>Test</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &#39;react&#39;;</span><br><span class=\"line\">import * as Testing from &#39;@testing-library&#x2F;react&#39;;</span><br><span class=\"line\">import ExampleByTestId from &quot;.&#x2F;ExampleByTestId&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">test(&#39;testing getByTestId&#39;,()&#x3D;&gt;&#123;</span><br><span class=\"line\">    Testing.render(&lt;ExampleByTestId&#x2F;&gt;);</span><br><span class=\"line\">    Testing.screen.getByTestId(&#39;custom-element&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<br/>\n\n<p>En este post he querido ver las <em>queries</em> que nos brinda esta librería, para terminar mi aprendizaje de <strong>React Testing</strong> veremos en el siguiente los <strong>Firing Events</strong> y algunos de los <strong>métodos que hereda de DOM Testing Library</strong> .</p>\n<p><strong><em>Nos vemos en el próximo post,……</em></strong></p>\n"},{"title":"Un novato junto a \"React Testing\" última parte","author":"Samuel Romero Arbelo","date":"2021-05-09T09:48:43.000Z","_content":"# Firing Events\n\nPrimeramente me gustaría cometar una conclusión que nos indica la documentación. Dicha conclusión, nos indica que en muchos proyectos se usa **fireEvent, cuando la mayor parte deberias usar** **[User-Event](https://testing-library.com/docs/ecosystem-user-event/)**\n\n\n* ### FireEvent\n\nSon evento de los propios elementos del DOM, los cuales podemos encontrar en las **[Referencias de la APIWeb de Mozilla](https://developer.mozilla.org/es/docs/Web/API)**\n\n> fireEvent(node: HTMLElement, event: Event)\n\nEn estes ejemplo vamos a usar **[MouseEvent](https://developer.mozilla.org/es/docs/Web/API/MouseEvent)**:\n\n\n**Componente**\n       \n   \n```\nimport * as React from \"react\";\nimport \"./Button.scss\";\n\nconst Button = () => {\n  return (\n    <div className={\"Button\"}>\n      <h3>DOMFireEvent</h3>\n      <button type=\"submit\">Click button to fireEvent</button>\n    </div>\n  );\n};\n\nexport default Button;\n\n```\n\n<br/>\n\n **Test**\n\n  ```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport Button from \"./Button\";\n\ntest(\"MouseEvent Click\", () => {\n  Testing.render(<Button type=\"submit\">Click button to fireEvent</Button>);\n  Testing.fireEvent(\n    Testing.screen.getByText(\"Click button to fireEvent\"),\n    new MouseEvent(\"click\", {\n      bubbles: true,\n      cancelable: true,\n    })\n  );\n});\n  ```\n\n<br/>\n\n\n* ### FireEvent[eventName]\n\nEn este punto la documentación aconseja  que veamos los [tipos de eventos](https://github.com/testing-library/dom-testing-library/blob/master/src/event-map.js) que podemos encontrar.\n\nEsta manera de llamar al evento es más directa, por ejemplo tenémos el evento **change** el cual nos simularía un cambio en el elemento.\n\n\n\n**Componente**\n       \n   \n```\nimport * as React from \"react\";\nimport \"./InputFireEvent.scss\";\n\nconst InputFireEvent = () => {\n  const [value, setValue] = React.useState(\"\");\n  const handleChange = (ev) => {\n    ev.preventDefault();\n    const inputtedValue = ev.currentTarget.value;\n    setValue(inputtedValue);\n  };\n\n  return (\n    <div className={\"input-with-title\"}>\n      <h3>Change FireEvent</h3>\n      <input value={value} aria-label=\"date-input\" onChange={handleChange} />\n    </div>\n  );\n};\n\nexport default InputFireEvent;\n\n\n\n```\n\n<br/>\n\n **Test**\n\n  ```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport InputFireEvent from \"./InputFireEvent\";\n\ntest(\"Change FireEvent\", () => {\n  const utils = Testing.render(<InputFireEvent />);\n  const input = utils.getByLabelText(\"date-input\");\n  const date = \"2021-02-03\";\n\n  Testing.fireEvent.change(input, { target: { value: date } });\n  expect(input.value).toBe(\"2021-02-03\");\n});\n\n\n  ```\n\n<br/>\n\n* ### CreateEvent[eventName]\n\nEsta opción nos permite crear eventos que luego podemos lazar con **fireEvent**. La ventaja que nos proporciona además de poder usarlo en diferentes puntos de nuestro test, es que si necesita acceder a propiedades de eventos que no se pueden iniciar mediante programación, lo puede hacer.","source":"_drafts/Untitled.md","raw":"title: Un novato junto a \"React Testing\" última parte\nauthor: Samuel Romero Arbelo\ndate: 2021-05-09 10:48:43\ntags:\n---\n# Firing Events\n\nPrimeramente me gustaría cometar una conclusión que nos indica la documentación. Dicha conclusión, nos indica que en muchos proyectos se usa **fireEvent, cuando la mayor parte deberias usar** **[User-Event](https://testing-library.com/docs/ecosystem-user-event/)**\n\n\n* ### FireEvent\n\nSon evento de los propios elementos del DOM, los cuales podemos encontrar en las **[Referencias de la APIWeb de Mozilla](https://developer.mozilla.org/es/docs/Web/API)**\n\n> fireEvent(node: HTMLElement, event: Event)\n\nEn estes ejemplo vamos a usar **[MouseEvent](https://developer.mozilla.org/es/docs/Web/API/MouseEvent)**:\n\n\n**Componente**\n       \n   \n```\nimport * as React from \"react\";\nimport \"./Button.scss\";\n\nconst Button = () => {\n  return (\n    <div className={\"Button\"}>\n      <h3>DOMFireEvent</h3>\n      <button type=\"submit\">Click button to fireEvent</button>\n    </div>\n  );\n};\n\nexport default Button;\n\n```\n\n<br/>\n\n **Test**\n\n  ```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport Button from \"./Button\";\n\ntest(\"MouseEvent Click\", () => {\n  Testing.render(<Button type=\"submit\">Click button to fireEvent</Button>);\n  Testing.fireEvent(\n    Testing.screen.getByText(\"Click button to fireEvent\"),\n    new MouseEvent(\"click\", {\n      bubbles: true,\n      cancelable: true,\n    })\n  );\n});\n  ```\n\n<br/>\n\n\n* ### FireEvent[eventName]\n\nEn este punto la documentación aconseja  que veamos los [tipos de eventos](https://github.com/testing-library/dom-testing-library/blob/master/src/event-map.js) que podemos encontrar.\n\nEsta manera de llamar al evento es más directa, por ejemplo tenémos el evento **change** el cual nos simularía un cambio en el elemento.\n\n\n\n**Componente**\n       \n   \n```\nimport * as React from \"react\";\nimport \"./InputFireEvent.scss\";\n\nconst InputFireEvent = () => {\n  const [value, setValue] = React.useState(\"\");\n  const handleChange = (ev) => {\n    ev.preventDefault();\n    const inputtedValue = ev.currentTarget.value;\n    setValue(inputtedValue);\n  };\n\n  return (\n    <div className={\"input-with-title\"}>\n      <h3>Change FireEvent</h3>\n      <input value={value} aria-label=\"date-input\" onChange={handleChange} />\n    </div>\n  );\n};\n\nexport default InputFireEvent;\n\n\n\n```\n\n<br/>\n\n **Test**\n\n  ```\nimport * as React from \"react\";\nimport * as Testing from \"@testing-library/react\";\nimport InputFireEvent from \"./InputFireEvent\";\n\ntest(\"Change FireEvent\", () => {\n  const utils = Testing.render(<InputFireEvent />);\n  const input = utils.getByLabelText(\"date-input\");\n  const date = \"2021-02-03\";\n\n  Testing.fireEvent.change(input, { target: { value: date } });\n  expect(input.value).toBe(\"2021-02-03\");\n});\n\n\n  ```\n\n<br/>\n\n* ### CreateEvent[eventName]\n\nEsta opción nos permite crear eventos que luego podemos lazar con **fireEvent**. La ventaja que nos proporciona además de poder usarlo en diferentes puntos de nuestro test, es que si necesita acceder a propiedades de eventos que no se pueden iniciar mediante programación, lo puede hacer.","slug":"Untitled","published":0,"updated":"2021-05-09T09:49:16.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckoh0hx4a000052s2ge4h2tvl","content":"<h1 id=\"Firing-Events\"><a href=\"#Firing-Events\" class=\"headerlink\" title=\"Firing Events\"></a>Firing Events</h1><p>Primeramente me gustaría cometar una conclusión que nos indica la documentación. Dicha conclusión, nos indica que en muchos proyectos se usa <strong>fireEvent, cuando la mayor parte deberias usar</strong> <strong><a href=\"https://testing-library.com/docs/ecosystem-user-event/\" target=\"_blank\" rel=\"noopener\">User-Event</a></strong></p>\n<ul>\n<li><h3 id=\"FireEvent\"><a href=\"#FireEvent\" class=\"headerlink\" title=\"FireEvent\"></a>FireEvent</h3></li>\n</ul>\n<p>Son evento de los propios elementos del DOM, los cuales podemos encontrar en las <strong><a href=\"https://developer.mozilla.org/es/docs/Web/API\" target=\"_blank\" rel=\"noopener\">Referencias de la APIWeb de Mozilla</a></strong></p>\n<blockquote>\n<p>fireEvent(node: HTMLElement, event: Event)</p>\n</blockquote>\n<p>En estes ejemplo vamos a usar <strong><a href=\"https://developer.mozilla.org/es/docs/Web/API/MouseEvent\" target=\"_blank\" rel=\"noopener\">MouseEvent</a></strong>:</p>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;Button.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const Button &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;Button&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;DOMFireEvent&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;button type&#x3D;&quot;submit&quot;&gt;Click button to fireEvent&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Button;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p> <strong>Test</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import Button from &quot;.&#x2F;Button&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;MouseEvent Click&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;Button type&#x3D;&quot;submit&quot;&gt;Click button to fireEvent&lt;&#x2F;Button&gt;);</span><br><span class=\"line\">  Testing.fireEvent(</span><br><span class=\"line\">    Testing.screen.getByText(&quot;Click button to fireEvent&quot;),</span><br><span class=\"line\">    new MouseEvent(&quot;click&quot;, &#123;</span><br><span class=\"line\">      bubbles: true,</span><br><span class=\"line\">      cancelable: true,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n\n<ul>\n<li><h3 id=\"FireEvent-eventName\"><a href=\"#FireEvent-eventName\" class=\"headerlink\" title=\"FireEvent[eventName]\"></a>FireEvent[eventName]</h3></li>\n</ul>\n<p>En este punto la documentación aconseja  que veamos los <a href=\"https://github.com/testing-library/dom-testing-library/blob/master/src/event-map.js\" target=\"_blank\" rel=\"noopener\">tipos de eventos</a> que podemos encontrar.</p>\n<p>Esta manera de llamar al evento es más directa, por ejemplo tenémos el evento <strong>change</strong> el cual nos simularía un cambio en el elemento.</p>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputFireEvent.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputFireEvent &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const [value, setValue] &#x3D; React.useState(&quot;&quot;);</span><br><span class=\"line\">  const handleChange &#x3D; (ev) &#x3D;&gt; &#123;</span><br><span class=\"line\">    ev.preventDefault();</span><br><span class=\"line\">    const inputtedValue &#x3D; ev.currentTarget.value;</span><br><span class=\"line\">    setValue(inputtedValue);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;input-with-title&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Change FireEvent&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input value&#x3D;&#123;value&#125; aria-label&#x3D;&quot;date-input&quot; onChange&#x3D;&#123;handleChange&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputFireEvent;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p> <strong>Test</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import InputFireEvent from &quot;.&#x2F;InputFireEvent&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;Change FireEvent&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const utils &#x3D; Testing.render(&lt;InputFireEvent &#x2F;&gt;);</span><br><span class=\"line\">  const input &#x3D; utils.getByLabelText(&quot;date-input&quot;);</span><br><span class=\"line\">  const date &#x3D; &quot;2021-02-03&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  Testing.fireEvent.change(input, &#123; target: &#123; value: date &#125; &#125;);</span><br><span class=\"line\">  expect(input.value).toBe(&quot;2021-02-03&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><h3 id=\"CreateEvent-eventName\"><a href=\"#CreateEvent-eventName\" class=\"headerlink\" title=\"CreateEvent[eventName]\"></a>CreateEvent[eventName]</h3></li>\n</ul>\n<p>Esta opción nos permite crear eventos que luego podemos lazar con <strong>fireEvent</strong>. La ventaja que nos proporciona además de poder usarlo en diferentes puntos de nuestro test, es que si necesita acceder a propiedades de eventos que no se pueden iniciar mediante programación, lo puede hacer.</p>\n","site":{"data":{"contact":{"title":"Contacto","subtitle":"Medios de contacto.","items":[{"title":"Email","content":"oiranca@gmail.com"},{"title":"Perfil Linkedin","content":"Samuel Romero Arbelo","href":"#"}]},"about":{"title":"Un poco de mí","subtitle":"Curioso por naturaleza.","image":"img/perfil/photo_me.jpg","description":"<p>Mi nombre es <strong>Samuel Romero Arbelo</strong> soy de un pequeño pueblo llamado Ingenio, en la provincia de Las Palmas.</p>\n<p> Soy una persona <strong>curiosa</strong>, que le gusta estar siempre <strong>investigando</strong>, <strong>autodidacta</strong> ..., pero tengo que admitir que donde esté un buen equipo en el que todos aprendamos, me siento muy cómodo</p>\n<p>Empecé en este mundillo cuando tenía unos 21 años, en un Ciclo de Grado Superior de Telecomunicaciones en Informática, donde ví <strong>C++</strong>, pero por capricho de la vida, mi camino no fue el de la programación, aunque siempre se quedó dentro de mí el no poder dedicarme a ello.\n<p> Actualmente, he terminado el Ciclo Superior de Desarrollo de <strong>Aplicaciones Multiplataformas</strong> y por mi parte he realizado varios cursos de <strong>JavaScript</strong>, <strong>Angular</strong>, <strong>HTML5</strong>, <strong>CSS3</strong> y hoy en día sigo formándome <i><strong>(eso nunca va a parar)</strong></i>, en un bootcamp de <strong>Frontend</strong>, donde estoy reforzando conocimientos, pero también aprendiendo tenologías nuevas como <strong> React </strong>y seguiré con otro de Backend y para finalizar esta formación, uno de Agile.</p>","skills":[{"name":"JavaScript / TypeScript","percentage":60},{"name":"React","percentage":40},{"name":"HTML5","percentage":70},{"name":"CSS3","percentage":52},{"name":"Angular","percentage":40},{"name":"Java","percentage":60}]},"footer":{"line_01":"&copy 2020 Samuel Romero Arbelo"},"experience":{"title":"Experiencia","subtitle":"La propia vida.","items":[{"title":"Prácticas de Empresa en Lean Mind","content":"Las prácticas las he desarrollado como colaborador, en un proyecto open source para la plataforma Huella Positiva, en la cual hemos desarrollado el frontend con React.","href":"https://leanmind.es/es/","icon":"icon-info","featured":false}]},"hero":{"title":"Samuel Romero Arbelo","proposal_value":"Junior Developer","image":"img/japon/templo_izquierda.jpg"},"logo":{"image":"","image_dark":"","text":"","text_dark":""},"portfolio":{"title":"Proyectos","subtitle":"Siempre aprendiendo.","items":[{"grid_class":"col-xs-12 col-sm-6 col-md-6 margin-b-4","image":"img/homeWork/Logo_HomeworK.png","hide_text":"Hide","title":"HomeWork (Android / Web)","subtitle":"Proyecto en Android y su versión Web","description":"<h2><b>HomeWork en Android</b> </h2> <p>En la versión de <b>android</b> he usado como tecnología <b>Java 8</b>, los datos de lo usuarios y todo lo necesario para el funcionamiento de la aplicación están alojados<b> en Firebase</b>. <h2><b>HomeWork Web</b> </h2> <p>En la versión <b>Web</b> he realizado la parte del frontend con <b>Angular 8</b> mientras que el backend ha sido desarrollado con <b>Node.js y Express</b>, montando una base de datos en <b>Mongodb</b>.</p>\n<h4><b><i>La versión web sigue en desarrollo.</i></b></h4>","tags":[{"text":"Versión Android","href":"https://github.com/Oiranca/pgl-project"},{"text":"Versión Web (Frontend) ","href":"https://github.com/Oiranca/frontend-homework"},{"text":"Versión Web (Backend)","href":"https://github.com/Oiranca/backend-homework"}],"parameters":[{"title":"Versión en Android","text":"Java / Firebase"},{"title":"Versión Web","text":"Angular 8 / Node.js / Express / Mongodb"}]}]},"menu":[{"text":"Incio","href":"#body"},{"text":"Un poco de mí","href":"#about"},{"text":"Experiencia","href":"#experience"},{"text":"Proyectos","href":"#work"},{"text":"Contacto","href":"#contact"},{"text":"Blog","href":"blog"}],"social":[{"text":"Github","href":"https://github.com/Oiranca","icon":"icon-social-github"},{"text":"Twitter","href":"https://twitter.com/Oiranca","icon":"icon-social-twitter"},{"text":"Linkedin","href":"https://www.linkedin.com/in/samuel-romero-arbelo/","icon":"icon-social-linkedin"}]}},"excerpt":"","more":"<h1 id=\"Firing-Events\"><a href=\"#Firing-Events\" class=\"headerlink\" title=\"Firing Events\"></a>Firing Events</h1><p>Primeramente me gustaría cometar una conclusión que nos indica la documentación. Dicha conclusión, nos indica que en muchos proyectos se usa <strong>fireEvent, cuando la mayor parte deberias usar</strong> <strong><a href=\"https://testing-library.com/docs/ecosystem-user-event/\" target=\"_blank\" rel=\"noopener\">User-Event</a></strong></p>\n<ul>\n<li><h3 id=\"FireEvent\"><a href=\"#FireEvent\" class=\"headerlink\" title=\"FireEvent\"></a>FireEvent</h3></li>\n</ul>\n<p>Son evento de los propios elementos del DOM, los cuales podemos encontrar en las <strong><a href=\"https://developer.mozilla.org/es/docs/Web/API\" target=\"_blank\" rel=\"noopener\">Referencias de la APIWeb de Mozilla</a></strong></p>\n<blockquote>\n<p>fireEvent(node: HTMLElement, event: Event)</p>\n</blockquote>\n<p>En estes ejemplo vamos a usar <strong><a href=\"https://developer.mozilla.org/es/docs/Web/API/MouseEvent\" target=\"_blank\" rel=\"noopener\">MouseEvent</a></strong>:</p>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;Button.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const Button &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;Button&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;DOMFireEvent&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;button type&#x3D;&quot;submit&quot;&gt;Click button to fireEvent&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Button;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p> <strong>Test</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import Button from &quot;.&#x2F;Button&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;MouseEvent Click&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  Testing.render(&lt;Button type&#x3D;&quot;submit&quot;&gt;Click button to fireEvent&lt;&#x2F;Button&gt;);</span><br><span class=\"line\">  Testing.fireEvent(</span><br><span class=\"line\">    Testing.screen.getByText(&quot;Click button to fireEvent&quot;),</span><br><span class=\"line\">    new MouseEvent(&quot;click&quot;, &#123;</span><br><span class=\"line\">      bubbles: true,</span><br><span class=\"line\">      cancelable: true,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n\n<ul>\n<li><h3 id=\"FireEvent-eventName\"><a href=\"#FireEvent-eventName\" class=\"headerlink\" title=\"FireEvent[eventName]\"></a>FireEvent[eventName]</h3></li>\n</ul>\n<p>En este punto la documentación aconseja  que veamos los <a href=\"https://github.com/testing-library/dom-testing-library/blob/master/src/event-map.js\" target=\"_blank\" rel=\"noopener\">tipos de eventos</a> que podemos encontrar.</p>\n<p>Esta manera de llamar al evento es más directa, por ejemplo tenémos el evento <strong>change</strong> el cual nos simularía un cambio en el elemento.</p>\n<p><strong>Componente</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import &quot;.&#x2F;InputFireEvent.scss&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const InputFireEvent &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const [value, setValue] &#x3D; React.useState(&quot;&quot;);</span><br><span class=\"line\">  const handleChange &#x3D; (ev) &#x3D;&gt; &#123;</span><br><span class=\"line\">    ev.preventDefault();</span><br><span class=\"line\">    const inputtedValue &#x3D; ev.currentTarget.value;</span><br><span class=\"line\">    setValue(inputtedValue);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&#123;&quot;input-with-title&quot;&#125;&gt;</span><br><span class=\"line\">      &lt;h3&gt;Change FireEvent&lt;&#x2F;h3&gt;</span><br><span class=\"line\">      &lt;input value&#x3D;&#123;value&#125; aria-label&#x3D;&quot;date-input&quot; onChange&#x3D;&#123;handleChange&#125; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default InputFireEvent;</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<p> <strong>Test</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as React from &quot;react&quot;;</span><br><span class=\"line\">import * as Testing from &quot;@testing-library&#x2F;react&quot;;</span><br><span class=\"line\">import InputFireEvent from &quot;.&#x2F;InputFireEvent&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&quot;Change FireEvent&quot;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const utils &#x3D; Testing.render(&lt;InputFireEvent &#x2F;&gt;);</span><br><span class=\"line\">  const input &#x3D; utils.getByLabelText(&quot;date-input&quot;);</span><br><span class=\"line\">  const date &#x3D; &quot;2021-02-03&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  Testing.fireEvent.change(input, &#123; target: &#123; value: date &#125; &#125;);</span><br><span class=\"line\">  expect(input.value).toBe(&quot;2021-02-03&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<br/>\n\n<ul>\n<li><h3 id=\"CreateEvent-eventName\"><a href=\"#CreateEvent-eventName\" class=\"headerlink\" title=\"CreateEvent[eventName]\"></a>CreateEvent[eventName]</h3></li>\n</ul>\n<p>Esta opción nos permite crear eventos que luego podemos lazar con <strong>fireEvent</strong>. La ventaja que nos proporciona además de poder usarlo en diferentes puntos de nuestro test, es que si necesita acceder a propiedades de eventos que no se pueden iniciar mediante programación, lo puede hacer.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}